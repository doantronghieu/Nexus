The sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

Install
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
Usage
import openmeteo_requests

import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://api.open-meteo.com/v1/forecast"
params = {
	"latitude": 52.52,
	"longitude": 13.41,
	"hourly": "temperature_2m"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s", utc = True),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}
hourly_data["temperature_2m"] = hourly_temperature_2m

hourly_dataframe = pd.DataFrame(data = hourly_data)
print(hourly_dataframe)


Data Source
Open-Meteo weather forecast APIs use weather models from multiple national weather providers. For each location worldwide, the best models will be combined to provide the best possible forecast.

Weather models cover different geographic areas at different resolutions and provide different weather variables. Depending on the model, data have been interpolated to hourly values or not all weather variables are available. With the drop down Weather models (just below the hourly variables), you can select and compare individual weather models.

You can find the update timings in the model updates documentation.
Weather Model	National Weather Provider	Origin Country	Resolution	Forecast Length	Update frequency
ICON	Deutscher Wetterdienst (DWD)	Germany	2 - 11 km	7.5 days	Every 3 hours
GFS & HRRR	NOAA	United States	3 - 25 km	16 days	Every hour
ARPEGE & AROME	Météo-France	France	1 - 25 km	4 days	Every hour
IFS & AIFS	ECMWF	European Union	25 km	7 days	Every 6 hours
UKMO	UK Met Office	United Kingdom	2 - 10 km	7 days	Every hour
MSM & GSM	JMA	Japan	5 - 55 km	11 days	Every 3 hours
MET Nordic	MET Norway	Norway	1 km	2.5 days	Every hour
HARMONIE	KNMI	Netherlands	2 km	2.5 days	Every hour
HARMONIE	DMI	Denmark	2 km	2.5 days	Every 3 hours
GEM	Canadian Weather Service	Canada	2.5 km	10 days	Every 6 hours
GFS GRAPES	China Meteorological Administration (CMA)	China	15 km	10 days	Every 6 hours
ACCESS-G	Australian Bureau of Meteorology (BOM)	Australia	15 km	10 days	Every 6 hours
COSMO 2I & 5M	AM ARPAE ARPAP	Italy	2 km	3 days	Every 3 hours
API Documentation
The API endpoint /v1/forecast accepts a geographical coordinate, a list of weather variables and responds with a JSON hourly weather forecast for 7 days. Time always starts at 0:00 today and contains 168 hours. If &forecast_days=16 is set, up to 16 days of forecast can be returned. All URL parameters are listed below:

Parameter	Format	Required	Default	Description
latitude, longitude	Floating point	Yes		Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g. &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.
elevation	Floating point	No		The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.
hourly	String array	No		A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameter in the URL can be used.
daily	String array	No		A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameter in the URL can be used. If daily weather variables are specified, parameter timezone is required.
current	String array	No		A list of weather variables to get current conditions.
temperature_unit	String	No	celsius	If fahrenheit is set, all temperature values are converted to Fahrenheit.
wind_speed_unit	String	No	kmh	Other wind speed speed units: ms, mph and kn
precipitation_unit	String	No	mm	Other precipitation amount units: inch
timeformat	String	No	iso8601	If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamp are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.
timezone	String	No	GMT	If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.
past_days	Integer (0-92)	No	0	If past_days is set, yesterday or the day before yesterday data are also returned.
forecast_days	Integer (0-16)	No	7	Per default, only 7 days are returned. Up to 16 days of forecast are possible.
forecast_hours
forecast_minutely_15
past_hours
past_minutely_15	Integer (>0)	No		Similar to forecast_days, the number of timesteps of hourly and 15-minutely data can controlled. Instead of using the current day as a reference, the current hour or the current 15-minute time-step is used.
start_date
end_date	String (yyyy-mm-dd)	No		The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).
start_hour
end_hour
start_minutely_15
end_minutely_15	String (yyyy-mm-ddThh:mm)	No		The time interval to get weather data for hourly or 15 minutely data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00).
models	String array	No	auto	Manually select one or more weather models. Per default, the best suitable weather models will be combined.
cell_selection	String	No	land	Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.
apikey	String	No		Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.
Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!

Hourly Parameter Definition
The parameter &hourly= accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.

Variable	Valid time	Unit	Description
temperature_2m	Instant	°C (°F)	Air temperature at 2 meters above ground
relative_humidity_2m	Instant	%	Relative humidity at 2 meters above ground
dew_point_2m	Instant	°C (°F)	Dew point temperature at 2 meters above ground
apparent_temperature	Instant	°C (°F)	Apparent temperature is the perceived feels-like temperature combining wind chill factor, relative humidity and solar radiation
pressure_msl
surface_pressure	Instant	hPa	Atmospheric air pressure reduced to mean sea level (msl) or pressure at surface. Typically pressure on mean sea level is used in meteorology. Surface pressure gets lower with increasing elevation.
cloud_cover	Instant	%	Total cloud cover as an area fraction
cloud_cover_low	Instant	%	Low level clouds and fog up to 3 km altitude
cloud_cover_mid	Instant	%	Mid level clouds from 3 to 8 km altitude
cloud_cover_high	Instant	%	High level clouds from 8 km altitude
wind_speed_10m
wind_speed_80m
wind_speed_120m
wind_speed_180m	Instant	km/h (mph, m/s, knots)	Wind speed at 10, 80, 120 or 180 meters above ground. Wind speed on 10 meters is the standard level.
wind_direction_10m
wind_direction_80m
wind_direction_120m
wind_direction_180m	Instant	°	Wind direction at 10, 80, 120 or 180 meters above ground
wind_gusts_10m	Preceding hour max	km/h (mph, m/s, knots)	Gusts at 10 meters above ground as a maximum of the preceding hour
shortwave_radiation	Preceding hour mean	W/m²	Shortwave solar radiation as average of the preceding hour. This is equal to the total global horizontal irradiation
direct_radiation
direct_normal_irradiance	Preceding hour mean	W/m²	Direct solar radiation as average of the preceding hour on the horizontal plane and the normal plane (perpendicular to the sun)
diffuse_radiation	Preceding hour mean	W/m²	Diffuse solar radiation as average of the preceding hour
global_tilted_irradiance	Preceding hour mean	W/m²	Total radiation received on a tilted pane as average of the preceding hour. The calculation is assuming a fixed albedo of 20% and in isotropic sky. Please specify tilt and azimuth parameter. Tilt ranges from 0° to 90° and is typically around 45°. Azimuth should be close to 0° (0° south, -90° east, 90° west). If azimuth is set to "nan", the calculation assumes a horizontal tracker. If tilt is set to "nan", it is assumed that the panel has a vertical tracker. If both are set to "nan", a bi-axial tracker is assumed.
vapour_pressure_deficit	Instant	kPa	Vapour Pressure Deficit (VPD) in kilopascal (kPa). For high VPD (>1.6), water transpiration of plants increases. For low VPD (<0.4), transpiration decreases
cape	Instant	J/kg	Convective available potential energy. See Wikipedia.
evapotranspiration	Preceding hour sum	mm (inch)	Evapotranspration from land surface and plants that weather models assumes for this location. Available soil water is considered. 1 mm evapotranspiration per hour equals 1 liter of water per spare meter.
et0_fao_evapotranspiration	Preceding hour sum	mm (inch)	ET₀ Reference Evapotranspiration of a well watered grass field. Based on FAO-56 Penman-Monteith equations ET₀ is calculated from temperature, wind speed, humidity and solar radiation. Unlimited soil water is assumed. ET₀ is commonly used to estimate the required irrigation for plants.
precipitation	Preceding hour sum	mm (inch)	Total precipitation (rain, showers, snow) sum of the preceding hour
snowfall	Preceding hour sum	cm (inch)	Snowfall amount of the preceding hour in centimeters. For the water equivalent in millimeter, divide by 7. E.g. 7 cm snow = 10 mm precipitation water equivalent
precipitation_probability	Preceding hour probability	%	Probability of precipitation with more than 0.1 mm of the preceding hour. Probability is based on ensemble weather models with 0.25° (~27 km) resolution. 30 different simulations are computed to better represent future weather conditions.
rain	Preceding hour sum	mm (inch)	Rain from large scale weather systems of the preceding hour in millimeter
showers	Preceding hour sum	mm (inch)	Showers from convective precipitation in millimeters from the preceding hour
weather_code	Instant	WMO code	Weather condition as a numeric code. Follow WMO weather interpretation codes. See table below for details.
snow_depth	Instant	meters	Snow depth on the ground
freezing_level_height	Instant	meters	Altitude above sea level of the 0°C level
visibility	Instant	meters	Viewing distance in meters. Influenced by low clouds, humidity and aerosols.
soil_temperature_0cm
soil_temperature_6cm
soil_temperature_18cm
soil_temperature_54cm	Instant	°C (°F)	Temperature in the soil at 0, 6, 18 and 54 cm depths. 0 cm is the surface temperature on land or water surface temperature on water.
soil_moisture_0_to_1cm
soil_moisture_1_to_3cm
soil_moisture_3_to_9cm
soil_moisture_9_to_27cm
soil_moisture_27_to_81cm	Instant	m³/m³	Average soil water content as volumetric mixing ratio at 0-1, 1-3, 3-9, 9-27 and 27-81 cm depths.
is_day	Instant	Dimensionless	1 if the current time step has daylight, 0 at night.
15-Minutely Parameter Definition
The parameter &minutely_15= can be used to get 15-minutely data. This data is based on NOAA HRRR model for North America and DWD ICON-D2 and Météo-France AROME model for Central Europe. If 15-minutely data is requested for other regions data is interpolated from 1-hourly to 15-minutely.

15-minutely data can be requested for other weather variables that are available for hourly data, but will use interpolation.

Variable	Valid time	Unit	HRRR	ICON-D2	AROME
temperature_2m	Instant	°C (°F)	x		x
relative_humidity_2m	Instant	%	x		x
dew_point_2m	Instant	°C (°F)	x		x
apparent_temperature	Instant	°C (°F)	x		x
shortwave_radiation	Preceding 15 minutes mean	W/m²	x	x	
direct_radiation
direct_normal_irradiance	Preceding 15 minutes mean	W/m²	x	x	
global_tilted_irradiance
global_tilted_irradiance_instant	Preceding 15 minutes mean	W/m²	x	x	
diffuse_radiation	Preceding 15 minutes mean	W/m²	x	x	
sunshine_duration	Preceding 15 minutes sum	seconds	x	x	
lightning_potential	Instant	J/kg		x	
precipitation	Preceding 15 minutes sum	mm (inch)	x	x	x
snowfall	Preceding 15 minutes sum	cm (inch)	x	x	x
rain	Preceding 15 minutes sum	mm (inch)	x	x	x
showers	Preceding 15 minutes sum	mm (inch)		x	
snowfall_height	Instant	meters		x	
freezing_level_height	Instant	meters		x	
cape	Instant	J/kg	x	x	x
wind_speed_10m
wind_speed_80m	Instant	km/h (mph, m/s, knots)	x		x
wind_direction_10m
wind_direction_80m
Instant	°	x		x
wind_gusts_10m	Preceding 15 min max	km/h (mph, m/s, knots)	x		
visibility	Instant	meters	x		x
weather_code	Instant	WMO code	x	x	
Pressure Level Variables
Pressure level variables do not have fixed altitudes. Altitude varies with atmospheric pressure. 1000 hPa is roughly between 60 and 160 meters above sea level. Estimated altitudes are given below. Altitudes are in meters above sea level (not above ground). For precise altitudes, geopotential_height can be used.

Level (hPa)	1000	975	950	925	900	850	800	700	600	500	400	300	250	200	150	100	70	50	30
Altitude	110 m	320 m	500 m	800 m	1000 m	1500 m	1900 m	3 km	4.2 km	5.6 km	7.2 km	9.2 km	10.4 km	11.8 km	13.5 km	15.8 km	17.7 km	19.3 km	22 km
All pressure level have valid times of the indicated hour (instant).

Variable	Unit	Description
temperature_1000hPa
temperature_975hPa, ...	°C (°F)	Air temperature at the specified pressure level. Air temperatures decrease linearly with pressure.
relative_humidity_1000hPa
relative_humidity_975hPa, ...	%	Relative humidity at the specified pressure level.
dew_point_1000hPa
dew_point_975hPa, ...	°C (°F)	Dew point temperature at the specified pressure level.
cloud_cover_1000hPa
cloud_cover_975hPa, ...	%	Cloud cover at the specified pressure level. Cloud cover is approximated based on relative humidity using Sundqvist et al. (1989). It may not match perfectly with low, mid and high cloud cover variables.
wind_speed_1000hPa
wind_speed_975hPa, ...	km/h (mph, m/s, knots)	Wind speed at the specified pressure level.
wind_direction_1000hPa
wind_direction_975hPa, ...	°	Wind direction at the specified pressure level.
geopotential_height_1000hPa
geopotential_height_975hPa, ...	meter	Geopotential height at the specified pressure level. This can be used to get the correct altitude in meter above sea level of each pressure level. Be carefull not to mistake it with altitude above ground.
Daily Parameter Definition
Aggregations are a simple 24 hour aggregation from hourly values. The parameter &daily= accepts the following values:

Variable	Unit	Description
temperature_2m_max
temperature_2m_min	°C (°F)	Maximum and minimum daily air temperature at 2 meters above ground
apparent_temperature_max
apparent_temperature_min	°C (°F)	Maximum and minimum daily apparent temperature
precipitation_sum	mm	Sum of daily precipitation (including rain, showers and snowfall)
rain_sum	mm	Sum of daily rain
showers_sum	mm	Sum of daily showers
snowfall_sum	cm	Sum of daily snowfall
precipitation_hours	hours	The number of hours with rain
precipitation_probability_max
precipitation_probability_min
precipitation_probability_mean	%	Probability of precipitation
weather_code	WMO code	The most severe weather condition on a given day
sunrise
sunset	iso8601	Sun rise and set times
sunshine_duration	seconds	The number of seconds of sunshine per day is determined by calculating direct normalized irradiance exceeding 120 W/m², following the WMO definition. Sunshine duration will consistently be less than daylight duration due to dawn and dusk.
daylight_duration	seconds	Number of seconds of daylight per day
wind_speed_10m_max
wind_gusts_10m_max	km/h (mph, m/s, knots)	Maximum wind speed and gusts on a day
wind_direction_10m_dominant	°	Dominant wind direction
shortwave_radiation_sum	MJ/m²	The sum of solar radiation on a given day in Megajoules
et0_fao_evapotranspiration	mm	Daily sum of ET₀ Reference Evapotranspiration of a well watered grass field
uv_index_max
uv_index_clear_sky_max	Index	Daily maximum in UV Index starting from 0. uv_index_clear_sky_max assumes cloud free conditions. Please follow the official WMO guidelines for ultraviolet index.
JSON Return Object
On success a JSON object will be returned.

      

  "latitude": 52.52,
  "longitude": 13.419,
  "elevation": 44.812,
  "generationtime_ms": 2.2119,
  "utc_offset_seconds": 0,
  "timezone": "Europe/Berlin",
  "timezone_abbreviation": "CEST",
  "hourly": {
    "time": ["2022-07-01T00:00", "2022-07-01T01:00", "2022-07-01T02:00", ...],
    "temperature_2m": [13, 12.7, 12.7, 12.5, 12.5, 12.8, 13, 12.9, 13.3, ...]
  },
  "hourly_units": {
    "temperature_2m": "°C"
  }

      
    
Parameter	Format	Description
latitude, longitude	Floating point	WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be a few kilometers away from the requested coordinate.
elevation	Floating point	The elevation from a 90 meter digital elevation model. This effects which grid-cell is selected (see parameter cell_selection). Statistical downscaling is used to adapt weather conditions for this elevation. This elevation can also be controlled with the query parameter elevation. If &elevation=nan is specified, all downscaling is disabled and the averge grid-cell elevation is used.
generationtime_ms	Floating point	Generation time of the weather forecast in milliseconds. This is mainly used for performance monitoring and improvements.
utc_offset_seconds	Integer	Applied timezone offset from the &timezone= parameter.
timezone
timezone_abbreviation	String	Timezone identifier (e.g. Europe/Berlin) and abbreviation (e.g. CEST)
hourly	Object	For each selected weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps.
hourly_units	Object	For each selected weather variable, the unit will be listed here.
daily	Object	For each selected daily weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps.
daily_units	Object	For each selected daily weather variable, the unit will be listed here.
Errors
In case an error occurs, for example a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

      

  "error": true,
  "reason": "Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly"

      
    
Weather variable documentation
WMO Weather interpretation codes (WW)
Code	Description
0	Clear sky
1, 2, 3	Mainly clear, partly cloudy, and overcast
45, 48	Fog and depositing rime fog
51, 53, 55	Drizzle: Light, moderate, and dense intensity
56, 57	Freezing Drizzle: Light and dense intensity
61, 63, 65	Rain: Slight, moderate and heavy intensity
66, 67	Freezing Rain: Light and heavy intensity
71, 73, 75	Snow fall: Slight, moderate, and heavy intensity
77	Snow grains
80, 81, 82	Rain showers: Slight, moderate, and violent
85, 86	Snow showers slight and heavy
95 *	Thunderstorm: Slight or moderate
96, 99 *	Thunderstorm with slight and heavy hail
(*) Thunderstorm forecast with hail is only available in Central Europe

Project description
Open-Meteo API Python Client
This ia an API client to get weather data from the Open-Meteo Weather API based on the Python library requests.

Instead of using JSON, the API client uses FlatBuffers to transfer data. Encoding data in FlatBuffers is more efficient for long time-series data. Data can be transferred to numpy, pandas, or polars using Zero-Copy to analyze large amount of data quickly. The schema definition files can be found on GitHub open-meteo/sdk.

This library is primarily designed for data-scientists to process weather data. In combination with the Open-Meteo Historical Weather API data from 1940 onwards can be analyzed quickly.

Basic Usage
The following example gets an hourly temperature, wind speed and precipitation forecast for Berlin. Additionally, the current temperature and relative humidity is retrieved. It is recommended to only specify the required weather variables.

# pip install openmeteo-requests

import openmeteo_requests
from openmeteo_sdk.Variable import Variable

om = openmeteo_requests.Client()
params = {
    "latitude": 52.54,
    "longitude": 13.41,
    "hourly": ["temperature_2m", "precipitation", "wind_speed_10m"],
    "current": ["temperature_2m", "relative_humidity_2m"]
}

responses = om.weather_api("https://api.open-meteo.com/v1/forecast", params=params)
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Current values
current = response.Current()
current_variables = list(map(lambda i: current.Variables(i), range(0, current.VariablesLength())))
current_temperature_2m = next(filter(lambda x: x.Variable() == Variable.temperature and x.Altitude() == 2, current_variables))
current_relative_humidity_2m = next(filter(lambda x: x.Variable() == Variable.relative_humidity and x.Altitude() == 2, current_variables))

print(f"Current time {current.Time()}")
print(f"Current temperature_2m {current_temperature_2m.Value()}")
print(f"Current relative_humidity_2m {current_relative_humidity_2m.Value()}")
Note 1: You can also supply a list of latitude and longitude coordinates to get data for multiple locations. The API will return a array of results, hence in this example, we only consider the first location with response = responses[0].

Note 2: Please note the function calls () for each attribute like Latitude(). Those function calls are necessary due to the FlatBuffers format to dynamically get data from an attribute without expensive parsing.

NumPy
If you are using NumPy you can easily get hourly or daily data as NumPy array of type float.

import numpy as np

hourly = response.Hourly()
hourly_time = range(hourly.Time(), hourly.TimeEnd(), hourly.Interval())
hourly_variables = list(map(lambda i: hourly.Variables(i), range(0, hourly.VariablesLength())))

hourly_temperature_2m = next(filter(lambda x: x.Variable() == Variable.temperature and x.Altitude() == 2, hourly_variables)).ValuesAsNumpy()
hourly_precipitation = next(filter(lambda x: x.Variable() == Variable.precipitation, hourly_variables)).ValuesAsNumpy()
hourly_wind_speed_10m = next(filter(lambda x: x.Variable() == Variable.wind_speed and x.Altitude() == 10, hourly_variables)).ValuesAsNumpy()
Pandas
After using NumPy to create arrays for hourly data, you can use Pandas to create a DataFrame from hourly data like follows:

import pandas as pd

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s"),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s"),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}
hourly_data["temperature_2m"] = hourly_temperature_2m
hourly_data["precipitation"] = hourly_precipitation
hourly_data["wind_speed_10m"] = hourly_wind_speed_10m

hourly_dataframe_pd = pd.DataFrame(data = hourly_data)
print(hourly_dataframe_pd)
#                    date  temperature_2m  precipitation  wind_speed_10m
# 0   2024-06-21 00:00:00       17.437000            0.0        6.569383
# 1   2024-06-21 01:00:00       17.087000            0.0        6.151683
# 2   2024-06-21 02:00:00       16.786999            0.0        7.421590
# 3   2024-06-21 03:00:00       16.337000            0.0        5.154416
Polars
Additionally, Polars can also be used to create a DataFrame from hourly data using the NumPy arrays created previously:

import polars as pl
from datetime import datetime, timedelta, timezone

start = datetime.fromtimestamp(hourly.Time(), timezone.utc)
end = datetime.fromtimestamp(hourly.TimeEnd(), timezone.utc)
freq = timedelta(seconds = hourly.Interval())

hourly_dataframe_pl = pl.select(
    date = pl.datetime_range(start, end, freq, closed = "left"),
    temperature_2m = hourly_temperature_2m,
    precipitation = hourly_precipitation,
    wind_speed_10m = hourly_wind_speed_10m
)
print(hourly_dataframe_pl)
# ┌─────────────────────────┬────────────────┬───────────────┬────────────────┐
# │ date                    ┆ temperature_2m ┆ precipitation ┆ wind_speed_10m │
# │ ---                     ┆ ---            ┆ ---           ┆ ---            │
# │ datetime[μs, UTC]       ┆ f32            ┆ f32           ┆ f32            │
# ╞═════════════════════════╪════════════════╪═══════════════╪════════════════╡
# │ 2024-06-21 00:00:00 UTC ┆ 17.437         ┆ 0.0           ┆ 6.569383       │
# │ 2024-06-21 01:00:00 UTC ┆ 17.087         ┆ 0.0           ┆ 6.151683       │
# │ 2024-06-21 02:00:00 UTC ┆ 16.786999      ┆ 0.0           ┆ 7.42159        │
# │ 2024-06-21 03:00:00 UTC ┆ 16.337         ┆ 0.0           ┆ 5.154416       │
Caching Data
If you are working with large amounts of data, caching data can make it easier to develop. You can pass a cached session from the library requests-cache to the Open-Meteo API client.

The following example stores all data indefinitely (expire_after=-1) in a SQLite database called .cache.sqlite. For more options read the requests-cache documentation.

Additionally, retry-requests to automatically retry failed API calls in case there has been any unexpected network or server error.

# pip install openmeteo-requests
# pip install requests-cache retry-requests

import openmeteo_requests
import requests_cache
from retry_requests import retry

# Setup the Open-Meteo API client with a cache and retry mechanism
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
om = openmeteo_requests.Client(session=retry_session)

# Using the client object `om` will now cache all weather data
TODO
Document multi location/timeinterval usage
Document FlatBuffers data structure
Document time start/end/interval
Document timezones behavior
Document pressure level and upper level
Document endpoints for air quality, etc
Consider dedicated pandas library to convert responses quickly
License
MIT

Ensemble API
Hundreds Of Weather Forecasts, Every time, Everywhere, All at OnceThe sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

Install
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
Usage
import openmeteo_requests
from openmeteo_sdk.Variable import Variable
from openmeteo_sdk.Aggregation import Aggregation
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://ensemble-api.open-meteo.com/v1/ensemble"
params = {
	"latitude": 52.52,
	"longitude": 13.41,
	"hourly": "temperature_2m",
	"models": "icon_seamless"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data
hourly = response.Hourly()
hourly_variables = list(map(lambda i: hourly.Variables(i), range(0, hourly.VariablesLength())))
hourly_temperature_2m = filter(lambda x: x.Variable() == Variable.temperature and x.Altitude() == 2, hourly_variables)

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s", utc = True),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}
# Process all members
for variable in hourly_temperature_2m:
	member = variable.EnsembleMember()
	hourly_data[f"temperature_2m_member{member}"] = variable.ValuesAsNumpy()

hourly_dataframe = pd.DataFrame(data = hourly_data)
print(hourly_dataframe)


Data Source
Ensemble models are a type of weather forecasting technique that use multiple members or versions of a model to produce a range of possible outcomes for a given forecast. Each member is initialized with slightly different initial conditions and/or model parameters to account for uncertainties and variations in the atmosphere, resulting in a set of perturbed forecasts.

By combining the perturbed forecasts, the ensemble model generates a probability distribution of possible outcomes, indicating not only the most likely forecast but also the range of possible outcomes and their likelihoods. This probabilistic approach provides more comprehensive and accurate forecast guidance, especially for high-impact weather events where uncertainties are high.

Different national weather services calculate ensemble models, each with varying resolutions of weather variables and forecast time-range. For instance, the German weather service DWD's ICON model provides exceptionally high resolution for Europe but only forecasts up to 7 days. Meanwhile, the GFS model can forecast up to 35 days, albeit at a lower resolution of 50 km. The appropriate ensemble model to use would depend on the forecast horizon and region of interest.

You can find the update timings in the model updates documentation.
National Weather Service	Weather Model	Region	Resolution	Members	Forecast Length	Update frequency
Deutscher Wetterdienst (DWD)	ICON-D2-EPS	Central Europe	2 km, hourly	20	2 days	Every 3 hours
ICON-EU-EPS	Europe	13 km, hourly	40	5 days	Every 6 hours
ICON-EPS	Global	26 km, hourly	40	7.5 days	Every 12 hours
NOAA	GFS Ensemble 0.25°	Global	25 km, 3-hourly	31	10 days	Every 6 hours
GFS Ensemble 0.5°	Global	50 km, 3-hourly	31	35 days	Every 6 hours
ECMWF	IFS 0.4°	Global	44 km, 3-hourly	51	15 days	Every 6 hours
IFS 0.25°	Global	25 km, 3-hourly	51	15 days	Every 6 hours
Canadian Weather Service	GEM	Global	25 km, 3-hourly	21	16 days (32 days every thursday)	Every 12 hours
Australian Bureau of Meteorology (BOM)	ACCESS-GE	Global	40 km, 3-hourly	18	10 days	Every 6 hours
To ensure ease of use, all data is interpolated to a 1-hourly time-step resolution. As the forecast horizon extends further into the future, some ensemble models may reduce the time resolution to 6-hourly intervals.

API Documentation
The API endpoint /v1/ensemble accepts a geographical coordinate, a list of weather variables and responds with a JSON hourly weather forecast for 7 days for each ensemble member. Time always starts at 0:00 today. All URL parameters are listed below:

Parameter	Format	Required	Default	Description
latitude, longitude	Floating point	Yes		Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g. &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.
models	String array	Yes		Select one or more ensemble weather models as comma-separated list
elevation	Floating point	No		The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated.
hourly	String array	No		A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameter in the URL can be used.
temperature_unit	String	No	celsius	If fahrenheit is set, all temperature values are converted to Fahrenheit.
wind_speed_unit	String	No	kmh	Other wind speed speed units: ms, mph and kn
precipitation_unit	String	No	mm	Other precipitation amount units: inch
timeformat	String	No	iso8601	If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamp are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.
timezone	String	No	GMT	If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.
past_days	Integer	No	0	If past_days is set, past weather data can be returned.
forecast_days	Integer (0-35)	No	7	Per default, only 7 days are returned. Up to 35 days of forecast are possible.
forecast_hours
forecast_minutely_15
past_hours
past_minutely_15	Integer (>0)	No		Similar to forecast_days, the number of timesteps of hourly and 15-minutely data can controlled. Instead of using the current day as a reference, the current hour or the current 15-minute time-step is used.
start_date
end_date	String (yyyy-mm-dd)	No		The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).
start_hour
end_hour
start_minutely_15
end_minutely_15	String (yyyy-mm-ddThh:mm)	No		The time interval to get weather data for hourly or 15 minutely data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00).
cell_selection	String	No	land	Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.
apikey	String	No		Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.
Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!

Hourly Parameter Definition
The parameter &hourly= accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.

Variable	Valid time	Unit	Description
temperature_2m	Instant	°C (°F)	Air temperature at 2 meters above ground
relative_humidity_2m	Instant	%	Relative humidity at 2 meters above ground
dew_point_2m	Instant	°C (°F)	Dew point temperature at 2 meters above ground
apparent_temperature	Instant	°C (°F)	Apparent temperature is the perceived feels-like temperature combining wind chill factor, relative humidity and solar radiation
pressure_msl
surface_pressure	Instant	hPa	Atmospheric air pressure reduced to mean sea level (msl) or pressure at surface. Typically pressure on mean sea level is used in meteorology. Surface pressure gets lower with increasing elevation.
cloud_cover	Instant	%	Total cloud cover as an area fraction
wind_speed_10m
wind_speed_80m
wind_speed_120m	Instant	km/h (mph, m/s, knots)	Wind speed at 10, 80 or 120 meters above ground. Wind speed on 10 meters is the standard level.
wind_direction_10m
wind_direction_80m
wind_direction_120m	Instant	°	Wind direction at 10, 80 or 120 meters above ground
wind_gusts_10m	Preceding hour max	km/h (mph, m/s, knots)	Gusts at 10 meters above ground as a maximum of the preceding hour
shortwave_radiation	Preceding hour mean	W/m²	Shortwave solar radiation as average of the preceding hour. This is equal to the total global horizontal irradiation
direct_radiation
direct_normal_irradiance	Preceding hour mean	W/m²	Direct solar radiation as average of the preceding hour on the horizontal plane and the normal plane (perpendicular to the sun). HRRR offers direct radiation directly. In GFS it is approximated based on Razo, Müller Witwer
diffuse_radiation	Preceding hour mean	W/m²	Diffuse solar radiation as average of the preceding hour. HRRR offers diffuse radiation directly. In GFS it is approximated based on Razo, Müller Witwer
global_tilted_irradiance	Preceding hour mean	W/m²	Total radiation received on a tilted pane as average of the preceding hour. The calculation is assuming a fixed albedo of 20% and in isotropic sky. Please specify tilt and azimuth parameter. Tilt ranges from 0° to 90° and is typically around 45°. Azimuth should be close to 0° (0° south, -90° east, 90° west). If azimuth is set to "nan", the calculation assumes a horizontal tracker. If tilt is set to "nan", it is assumed that the panel has a vertical tracker. If both are set to "nan", a bi-axial tracker is assumed.
sunshine_duration	Preceding hour sum	Seconds	Number of seconds of sunshine of the preceding hour per hour calculated by direct normalized irradiance exceeding 120 W/m², following the WMO definition.
vapour_pressure_deficit	Instant	kPa	Vapor Pressure Deificit (VPD) in kilopascal (kPa). For high VPD (>1.6), water transpiration of plants increases. For low VPD (<0.4), transpiration decreases
evapotranspiration	Preceding hour sum	mm (inch)	Evapotranspration from land surface and plants that weather models assumes for this location. Available soil water is considered. 1 mm evapotranspiration per hour equals 1 liter of water per spare meter.
et0_fao_evapotranspiration	Preceding hour sum	mm (inch)	ET₀ Reference Evapotranspiration of a well watered grass field. Based on FAO-56 Penman-Monteith equations ET₀ is calculated from temperature, wind speed, humidity and solar radiation. Unlimited soil water is assumed. ET₀ is commonly used to estimate the required irrigation for plants.
weather_code	Instant	WMO code	Weather condition as a numeric code. Follow WMO weather interpretation codes. See table below for details. Weather code is calculated from cloud cover analysis, precipitation, snowfall, cape, lifted index and gusts.
precipitation	Preceding hour sum	mm (inch)	Total precipitation (rain, showers, snow) sum of the preceding hour
snowfall	Preceding hour sum	cm (inch)	Snowfall amount of the preceding hour in centimeters. For the water equivalent in millimeter, divide by 7. E.g. 7 cm snow = 10 mm precipitation water equivalent
rain	Preceding hour sum	mm (inch)	Liquid precipitation of the preceding hour in millimeter
weather_code	Instant	WMO code	Weather condition as a numeric code. Follow WMO weather interpretation codes. See table below for details.
snow_depth	Instant	meters	Snow depth on the ground
freezing_level_height	Instant	meters	Altitude above sea level of the 0°C level
visibility	Instant	meters	Viewing distance in meters. Influenced by low clouds, humidity and aerosols.
cape	Instant	J/kg	Convective available potential energy. See Wikipedia.
surface_temperature	Instant	°C (°F)	Temperature of the top soil level
soil_temperature_0_to_10cm
soil_temperature_10_to_40cm
soil_temperature_40_to_100cm
soil_temperature_100_to_200cm	Instant	°C (°F)	Temperature in the soil as an average on 0-10, 10-40, 40-100 and 100-200 cm depths.
soil_moisture_0_to_10cm
soil_moisture_10_to_40cm
soil_moisture_40_to_100cm
soil_moisture_100_to_200cm	Instant	m³/m³	Average soil water content as volumetric mixing ratio at 0-10, 10-40, 40-100 and 100-200 cm depths.
Open-Meteo

Features
Pricing
About us & Contact
License
Terms & Privacy

Marine Weather API
Hourly wave forecasts at 5 km resolution
API Response
Preview:
Chart And URL
Python
Typescript
Swift
Other
The sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

Install
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
Usage
import openmeteo_requests

import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://marine-api.open-meteo.com/v1/marine"
params = {
	"latitude": 54.544587,
	"longitude": 10.227487,
	"hourly": "wave_height"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_wave_height = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s", utc = True),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}
hourly_data["wave_height"] = hourly_wave_height

hourly_dataframe = pd.DataFrame(data = hourly_data)
print(hourly_dataframe)


Data Sources
The Marine API combines wave models from different sources.

You can find the update timings in the model updates documentation.
Data Set	Region		Spatial Resolution	Temporal Resolution	Data Availability	Update frequency
MeteoFrance MFWAM	Global	Map	0.08° (~8 km)	3-Hourly	October 2021 with 10 day forecast	Every 12 hours
MeteoFrance SMOC Currents	Global	Map	0.08° (~8 km)	Hourly	January 2022 with 10 day forecast	Every 24 hours
ECMWF WAM	Global		0.25° (~25 km)	3-Hourly	March 2024 with 10 day forecast	Every 6 hours
NCEP GFS Wave	Global		0.25° (~25 km)	Hourly	June 2024 with 16 day forecast	Every 6 hours
NCEP GFS Wave	Latitude 52.5°N - 15°S		0.16° (~16 km)	Hourly	October 2024 with 16 day forecast	Every 6 hours
DWD GWAM	Europe		0.05° (~5 km)	Hourly	August 2022 with 8 day forecast	Twice daily
DWD EWAM	Global		0.25° (~25 km)	Hourly	August 2022 with 4 day forecast	Twice daily
ERA5-Ocean	Global		0.5° (~50 km)	Hourly	1940 to present	Daily with 5 days delay
API Documentation
The API endpoint /v1/marine accepts a geographical coordinate, a list of marine variables and responds with a JSON hourly marine weather forecast for 7 days. Time always starts at 0:00 today. All URL parameters are listed below:

Parameter	Format	Required	Default	Description
latitude, longitude	Floating point	Yes		Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g. &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.
hourly	String array	No		A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameter in the URL can be used.
daily	String array	No		A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameter in the URL can be used. If daily weather variables are specified, parameter timezone is required.
current	String array	No		A list of variables to get current conditions.
timeformat	String	No	iso8601	If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamp are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.
timezone	String	No	GMT	If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.
past_days	Integer (0-92)	No	0	If past_days is set, yesterday or the day before yesterday data are also returned.
forecast_days	Integer (0-8)	No	5	Per default, 7 days are returned. Up to 8 days of forecast are possible.
forecast_hours
past_hours	Integer (>0)	No		Similar to forecast_days, the number of timesteps of hourly data can controlled. Instead of using the current day as a reference, the current hour is used.
start_date
end_date	String (yyyy-mm-dd)	No		The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).
start_hour
end_hour	String (yyyy-mm-ddThh:mm)	No		The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00).
length_unit	String	No	metric	Options metric and imperial
cell_selection	String	No	sea	Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.
apikey	String	No		Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.
Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!

Hourly Parameter Definition
The parameter &hourly= accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.

Variable	Valid time	Unit	Description
wave_height
wind_wave_height
swell_wave_height	Instant	Meter	Wave height of significant mean, wind and swell waves. Wave directions are always reported as the direction the waves come from. 0° = From north towards south; 90° = From east
wave_direction
wind_wave_direction
swell_wave_direction	Instant	°	Mean direction of mean, wind and swell waves
wave_period
wind_wave_period
swell_wave_period	Instant	Seconds	Period between mean, wind and swell waves.
wind_wave_peak_period
swell_wave_peak_period	Instant	Seconds	Peak period between wind and swell waves.
ocean_current_velocity	Instant	km/h (mph, m/s, knots)	Velocity of ocean current considering Eulerian, Waves and Tides.
ocean_current_direction	Instant	°	Direction following the flow of the current. E.g. where the current is heading towards. 0° = Going north; 90° = Towards east.
Daily Parameter Definition
Aggregations are a simple 24 hour aggregation from hourly values. The parameter &daily= accepts the following values:

Variable	Unit	Description
wave_height_max
wind_wave_height_max
swell_wave_height_max	Meter	Maximum wave height on a given day for mean, wind and swell waves
wave_direction_dominant
wind_wave_direction_dominant
swell_wave_direction_dominant	°	Dominant wave direction of mean, wind and swell waves
wave_period_max
wind_wave_period_max
swell_wave_period_max	Seconds	Maximum wave period of mean, wind and swell
wind_wave_peak_period_max
swell_wave_peak_period_max	Seconds	Maximum peak period between wind and swell waves.
JSON Return Object
On success a JSON object will be returned.

      

  "latitude": 52.52,
  "longitude": 13.419,
  "elevation": 44.812,
  "generationtime_ms": 2.2119,
  "utc_offset_seconds": 0,
  "timezone": "Europe/Berlin",
  "timezone_abbreviation": "CEST",
  "hourly": {
    "time": ["2022-07-01T00:00", "2022-07-01T01:00", "2022-07-01T02:00", ...],
    "wave_height": [1, 1.7, 1.7, 1.5, 1.5, 1.8, 2.0, 1.9, 1.3, ...]
  },
  "hourly_units": {
    "wave_height": "m"
  },

      
    
Parameter	Format	Description
latitude, longitude	Floating point	WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be a few kilometers away from the requested coordinate.
generationtime_ms	Floating point	Generation time of the weather forecast in milliseconds. This is mainly used for performance monitoring and improvements.
utc_offset_seconds	Integer	Applied timezone offset from the &timezone= parameter.
timezone
timezone_abbreviation	String	Timezone identifier (e.g. Europe/Berlin) and abbreviation (e.g. CEST)
hourly	Object	For each selected weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps.
hourly_units	Object	For each selected weather variable, the unit will be listed here.
daily	Object	For each selected daily weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps.
daily_units	Object	For each selected daily weather variable, the unit will be listed here.
Errors
In case an error occurs, for example a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

      

  "error": true,
  "reason": "Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly"

      
    
Citation & Acknowledgement
Generated using ICON Wave forecast from the German Weather Service DWD.

Air Quality API
Pollutants and pollen forecast in 11 km resolution
The sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

Install
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
Usage
import openmeteo_requests

import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://air-quality-api.open-meteo.com/v1/air-quality"
params = {
	"latitude": 52.52,
	"longitude": 13.41,
	"hourly": ["pm10", "pm2_5"]
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_pm10 = hourly.Variables(0).ValuesAsNumpy()
hourly_pm2_5 = hourly.Variables(1).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s", utc = True),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}
hourly_data["pm10"] = hourly_pm10
hourly_data["pm2_5"] = hourly_pm2_5

hourly_dataframe = pd.DataFrame(data = hourly_data)
print(hourly_dataframe)


API Documentation
The API endpoint /v1/air-quality accepts a geographical coordinate, a list of weather variables and responds with a JSON hourly air quality forecast for 5 days. Time always starts at 0:00 today.

Forecast is based on the 11 kilometer CAMS European air quality forecast and the 40 kilometer CAMS global atmospheric composition forecasts. The European and global domain are not coupled and may show different forecasts.

All URL parameters are listed below:

Parameter	Format	Required	Default	Description
latitude, longitude	Floating point	Yes		Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g. &latitude=52.52,48.85&longitude=13.41,2.35. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column location_id.
hourly	String array	No		A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameter in the URL can be used.
current	String array	No		A list of variables to get current conditions.
domains	String	No	auto	Automatically combine both domains auto or specifically select the European cams_europe or global domain cams_global.
timeformat	String	No	iso8601	If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamp are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.
timezone	String	No	GMT	If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.
past_days	Integer (0-92)	No	0	If past_days is set, yesterday or the day before yesterday data are also returned.
forecast_days	Integer (0-7)	No	5	Per default, 5 days are returned. Up to 7 days of forecast are possible.
forecast_hours
past_hours	Integer (>0)	No		Similar to forecast_days, the number of timesteps of hourly data can controlled. Instead of using the current day as a reference, the current hour is used.
start_date
end_date	String (yyyy-mm-dd)	No		The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).
start_hour
end_hour	String (yyyy-mm-ddThh:mm)	No		The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00).
cell_selection	String	No	nearest	Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. sea prefers grid-cells on sea. nearest selects the nearest possible grid-cell.
apikey	String	No		Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.
Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!

Hourly Parameter Definition
The parameter &hourly= accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.

Variable	Valid time	Unit	Description
pm10
pm2_5	Instant	μg/m³	Particulate matter with diameter smaller than 10 µm (PM10) and smaller than 2.5 µm (PM2.5) close to surface (10 meter above ground)
carbon_monoxide
nitrogen_dioxide
sulphur_dioxide
ozone	Instant	μg/m³	Atmospheric gases close to surface (10 meter above ground)
ammonia	Instant	μg/m³	Ammonia concentration. Only available for Europe.
aerosol_optical_depth	Instant	Dimensionless	Aerosol optical depth at 550 nm of the entire atmosphere to indicate haze.
dust	Instant	μg/m³	Saharan dust particles close to surface level (10 meter above ground).
uv_index
uv_index_clear_sky	Instant	Index	UV index considering clouds and clear sky. See ECMWF UV Index recommendation for more information
alder_pollen
birch_pollen
grass_pollen
mugwort_pollen
olive_pollen
ragweed_pollen	Instant	Grains/m³	Pollen for various plants. Only available in Europe as provided by CAMS European Air Quality forecast.
european_aqi
european_aqi_pm2_5
european_aqi_pm10
european_aqi_nitrogen_dioxide
european_aqi_ozone
european_aqi_sulphur_dioxide	Instant	European AQI	European Air Quality Index (AQI) calculated for different particulate matter and gases individually. The consolidated european_aqi returns the maximum of all individual indices. Ranges from 0-20 (good), 20-40 (fair), 40-60 (moderate), 60-80 (poor), 80-100 (very poor) and exceeds 100 for extremely poor conditions.
us_aqi
us_aqi_pm2_5
us_aqi_pm10
us_aqi_nitrogen_dioxide
us_aqi_ozone
us_aqi_sulphur_dioxide
us_aqi_carbon_monoxide	Instant	U.S. AQI	United States Air Quality Index (AQI) calculated for different particulate matter and gases individually. The consolidated us_aqi returns the maximum of all individual indices. Ranges from 0-50 (good), 51-100 (moderate), 101-150 (unhealthy for sensitive groups), 151-200 (unhealthy), 201-300 (very unhealthy) and 301-500 (hazardous).
JSON Return Object
On success a JSON object will be returned.

      

  "latitude": 52.52,
  "longitude": 13.419,
  "elevation": 44.812,
  "generationtime_ms": 2.2119,
  "utc_offset_seconds": 0,
  "timezone": "Europe/Berlin",
  "timezone_abbreviation": "CEST",
  "hourly": {
    "time": ["2022-07-01T00:00", "2022-07-01T01:00", "2022-07-01T02:00", ...],
    "pm10": [1, 1.7, 1.7, 1.5, 1.5, 1.8, 2.0, 1.9, 1.3, ...]
  },
  "hourly_units": {
    "pm10": "μg/m³"
  },

      
    
Parameter	Format	Description
latitude, longitude	Floating point	WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be a few kilometers away from the requested coordinate.
generationtime_ms	Floating point	Generation time of the weather forecast in milliseconds. This is mainly used for performance monitoring and improvements.
utc_offset_seconds	Integer	Applied timezone offset from the &timezone= parameter.
timezone
timezone_abbreviation	String	Timezone identifier (e.g. Europe/Berlin) and abbreviation (e.g. CEST)
hourly	Object	For each selected weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps.
hourly_units	Object	For each selected weather variable, the unit will be listed here.
Errors
In case an error occurs, for example a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

      

  "error": true,
  "reason": "Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly"

      
    
Citation & Acknowledgement
METEO FRANCE, Institut national de l'environnement industriel et des risques (Ineris), Aarhus University, Norwegian Meteorological Institute (MET Norway), Jülich Institut für Energie- und Klimaforschung (IEK), Institute of Environmental Protection – National Research Institute (IEP-NRI), Koninklijk Nederlands Meteorologisch Instituut (KNMI), Nederlandse Organisatie voor toegepast-natuurwetenschappelijk onderzoek (TNO), Swedish Meteorological and Hydrological Institute (SMHI), Finnish Meteorological Institute (FMI), Italian National Agency for New Technologies, Energy and Sustainable Economic Development (ENEA) and Barcelona Supercomputing Center (BSC) (2022): CAMS European air quality forecasts, ENSEMBLE data. Copernicus Atmosphere Monitoring Service (CAMS) Atmosphere Data Store (ADS). (Updated twice daily).

All users of Open-Meteo data must provide a clear attribution to CAMS ENSEMBLE data provider as well as a reference to Open-Meteo.
Geocoding API
Search locations globally in any language
API Documentation
The API endpoint https://geocoding-api.open-meteo.com/v1/search accepts a search term and returns a list of matching locations. URL parameters are listed below:

Parameter	Format	Required	Default	Description
name	String	Yes		String to search for. An empty string or only 1 character will return an empty result. 2 characters will only match exact matching locations. 3 and more characters will perform fuzzy matching. The search string can be a location name or a postal code.
count	Integer	No	10	The number of search results to return. Up to 100 results can be retrieved.
format	String	No	json	By default, results are returned as JSON. Alternatively, protobuf is supported for more efficient encoding and transfer. The .proto file to decode the protobuf message is available in the geocoding GitHub repository.
language	String	No	en	Return translated results, if available, otherwise return english or the native location name. Lower-cased.
apikey	String	No		Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information.
Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!

JSON Return Object
On success a JSON object will be returned. Empty fields are not returned. E.g. admin4 will be missing if no fourth administrative level is available.

      

  "results": [
    {
      "id": 2950159,
      "name": "Berlin",
      "latitude": 52.52437,
      "longitude": 13.41053,
      "elevation": 74.0,
      "feature_code": "PPLC",
      "country_code": "DE",
      "admin1_id": 2950157,
      "admin2_id": 0,
      "admin3_id": 6547383,
      "admin4_id": 6547539,
      "timezone": "Europe/Berlin",
      "population": 3426354,
      "postcodes": [
        "10967",
        "13347"
      ],
      "country_id": 2921044,
      "country": "Deutschland",
      "admin1": "Berlin",
      "admin2": "",
      "admin3": "Berlin, Stadt",
      "admin4": "Berlin"
    },
    {
      ...
    }]

      
    
Parameter	Format	Description
id	Integer	Unique ID for this location
name	String	Location name. Localized following the &language= parameter, if possible
latitude, longitude	Floating point	Geographical WGS84 coordinates of this location
elevation	Floating point	Elevation above mean sea level of this location
timezone	String	Time zone using time zone database definitions
feature_code	String	Type of this location. Following the GeoNames feature_code definition
country_code	String	2-Character FIPS country code. E.g. DE for Germany
country	String	Country name. Localized following the &language= parameter, if possible
country_id	Integer	Unique ID for this country
population	Integer	Number of inhabitants
postcodes	String array	List of postcodes for this location
admin1, admin2, admin3, admin4	String	Name of hierarchical administrative areas this location resides in. Admin1 is the first administrative level. Admin2 the second administrative level. Localized following the &language= parameter, if possible
admin1_id, admin2_id, admin3_id, admin4_id	Integer	Unique IDs for the administrative areas
*Note: All IDs can be can be resolved via the API endpointhttps://geocoding-api.open-meteo.com/v1/get?id=2950159
Errors
In case an error occurs, for example a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

      

  "error": true,
  "reason": "Parameter count must be between 1 and 100."

      
    
Attribution
Location data based on GeoNames
Country flags from HatScripts/circle-flags