```markdown
# Open-Meteo

## Weather Forecast API
Seamless integration of high-resolution weather models with up to 16 days forecast.

### Location and Time
- **Location:**
  - **Coordinates**
    - **Latitude:** 52.52
    - **Longitude:** 13.41
  - **Timezone:** Not set (GMT+0)
- **Time:**
  - **Forecast Length:** 7 days (default)
  - **Time Interval:** 0 (default)

By default, we provide forecasts for 7 days, but you can access forecasts for up to 16 days. If you're interested in past weather data, you can use the Past Days feature to access archived forecasts.

### Hourly Weather Variables
- Temperature (2 m)
- Relative Humidity (2 m)
- Dewpoint (2 m)
- Apparent Temperature
- Precipitation Probability
- Precipitation (rain + showers + snow)
- Rain
- Showers
- Snowfall
- Snow Depth
- Weather code
- Sealevel Pressure
- Surface Pressure
- Cloud cover Total
- Cloud cover Low
- Cloud cover Mid
- Cloud cover High
- Visibility
- Evapotranspiration
- Reference Evapotranspiration (ET₀)
- Vapour Pressure Deficit
- Wind Speed (10 m)
- Wind Speed (80 m)
- Wind Speed (120 m)
- Wind Speed (180 m)
- Wind Direction (10 m)
- Wind Direction (80 m)
- Wind Direction (120 m)
- Wind Direction (180 m)
- Wind Gusts (10 m)
- Temperature (80 m)
- Temperature (120 m)
- Temperature (180 m)
- Soil Temperature (0 cm)
- Soil Temperature (6 cm)
- Soil Temperature (18 cm)
- Soil Temperature (54 cm)
- Soil Moisture (0-1 cm)
- Soil Moisture (1-3 cm)
- Soil Moisture (3-9 cm)
- Soil Moisture (9-27 cm)
- Soil Moisture (27-81 cm)

### Additional Variables And Options
- Solar Radiation Variables
- Pressure Level Variables
- Weather models
- 15-Minutely Weather Variables
- Daily Weather Variables

### Daily Weather Variables
- Weather code
- Maximum Temperature (2 m)
- Minimum Temperature (2 m)
- Maximum Apparent Temperature (2 m)
- Minimum Apparent Temperature (2 m)
- Sunrise
- Sunset
- Daylight Duration
- Sunshine Duration
- UV Index
- UV Index Clear Sky
- Precipitation Sum
- Rain Sum
- Showers Sum
- Snowfall Sum
- Precipitation Hours
- Precipitation Probability Max
- Maximum Wind Speed (10 m)
- Maximum Wind Gusts (10 m)
- Dominant Wind Direction (10 m)
- Shortwave Radiation Sum
- Reference Evapotranspiration (ET₀)

### Current Weather
- Temperature (2 m)
- Relative Humidity (2 m)
- Apparent Temperature
- Is Day or Night
- Precipitation
- Rain
- Showers
- Snowfall
- Weather code
- Cloud cover Total
- Sealevel Pressure
- Surface Pressure
- Wind Speed (10 m)
- Wind Direction (10 m)
- Wind Gusts (10 m)

**Note:** Current conditions are based on 15-minutely weather model data. Every weather variable available in hourly data, is available as current condition as well.

### Settings
- **Temperature Unit:** Celsius °C
- **Wind Speed Unit:** Km/h
- **Precipitation Unit:** Millimeter
- **Timeformat:** ISO 8601 (e.g. 2022-12-31)

### Usage License
- **Non-Commercial**
- **Commercial**
- **Self-Hosted**

Only for non-commercial use and less than 10.000 daily API calls. See Terms for more details.

### API Response
**Preview:**
- **Chart And URL**
- **Python**
- **Typescript**
- **Swift**
- **Other**

The sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

### Install
```bash
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
```

### Usage
```python
import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://api.open-meteo.com/v1/forecast"
params = {
	"latitude": 52.52,
	"longitude": 13.41,
	"hourly": "temperature_2m"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s", utc = True),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}

hourly_data["temperature_2m"] = hourly_temperature_2m

hourly_dataframe = pd.DataFrame(data = hourly_data)
print(hourly_dataframe)
```

### Data Source
Open-Meteo weather forecast APIs use weather models from multiple national weather providers. For each location worldwide, the best models will be combined to provide the best possible forecast.

Weather models cover different geographic areas at different resolutions and provide different weather variables. Depending on the model, data have been interpolated to hourly values or not all weather variables are available. With the drop down Weather models (just below the hourly variables), you can select and compare individual weather models.

You can find the update timings in the model updates documentation.

| Weather Model | National Weather Provider | Origin Country | Resolution | Forecast Length | Update frequency |
|---------------|---------------------------|----------------|------------|-----------------|------------------|
| ICON          | Deutscher Wetterdienst (DWD) | Germany        | 2 - 11 km  | 7.5 days        | Every 3 hours    |
| GFS & HRRR    | NOAA                      | United States  | 3 - 25 km  | 16 days         | Every hour       |
| ARPEGE & AROME| Météo-France              | France         | 1 - 25 km  | 4 days          | Every hour       |
| IFS & AIFS    | ECMWF                     | European Union | 25 km      | 15 days         | Every 6 hours    |
| UKMO          | UK Met Office             | United Kingdom | 2 - 10 km  | 7 days          | Every hour       |
| MSM & GSM     | JMA                       | Japan          | 5 - 55 km  | 11 days         | Every 3 hours    |
| MET Nordic    | MET Norway                | Norway         | 1 km       | 2.5 days        | Every hour       |
| HARMONIE      | KNMI                      | Netherlands    | 2 km       | 2.5 days        | Every hour       |
| HARMONIE      | DMI                       | Denmark        | 2 km       | 2.5 days        | Every 3 hours    |
| GEM           | Canadian Weather Service  | Canada         | 2.5 km     | 10 days         | Every 6 hours    |
| GFS GRAPES    | China Meteorological Administration (CMA) | China | 15 km | 10 days | Every 6 hours |
| ACCESS-G      | Australian Bureau of Meteorology (BOM) | Australia | 15 km | 10 days | Every 6 hours |
| COSMO 2I & 5M | AM ARPAE ARPAP            | Italy          | 2 km       | 3 days          | Every 3 hours    |

### API Documentation
The API endpoint `/v1/forecast` accepts a geographical coordinate, a list of weather variables and responds with a JSON hourly weather forecast for 7 days. Time always starts at 0:00 today and contains 168 hours. If `&forecast_days=16` is set, up to 16 days of forecast can be returned. All URL parameters are listed below:

| Parameter | Format | Required | Default | Description |
|-----------|--------|----------|---------|-------------|
| latitude, longitude | Floating point | Yes | | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g. `&latitude=52.52,48.85&longitude=13.41,2.35`. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column `location_id`. |
| elevation | Floating point | No | | The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If `&elevation=nan` is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated. |
| hourly | String array | No | | A list of weather variables which should be returned. Values can be comma separated, or multiple `&hourly=` parameter in the URL can be used. |
| daily | String array | No | | A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple `&daily=` parameter in the URL can be used. If daily weather variables are specified, parameter `timezone` is required. |
| current | String array | No | | A list of weather variables to get current conditions. |
| temperature_unit | String | No | celsius | If `fahrenheit` is set, all temperature values are converted to Fahrenheit. |
| wind_speed_unit | String | No | kmh | Other wind speed speed units: `ms`, `mph` and `kn` |
| precipitation_unit | String | No | mm | Other precipitation amount units: `inch` |
| timeformat | String | No | iso8601 | If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamp are in GMT+0! For daily values with unix timestamps, please apply `utc_offset_seconds` again to get the correct date. |
| timezone | String | No | GMT | If `timezone` is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If `auto` is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified. |
| past_days | Integer (0-92) | No | 0 | If `past_days` is set, yesterday or the day before yesterday data are also returned. |
| forecast_days | Integer (0-16) | No | 7 | Per default, only 7 days are returned. Up to 16 days of forecast are possible. |
| forecast_hours | Integer (>0) | No | | Similar to `forecast_days`, the number of timesteps of hourly and 15-minutely data can controlled. Instead of using the current day as a reference, the current hour or the current 15-minute time-step is used. |
| start_date, end_date | String (yyyy-mm-dd) | No | | The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. `2022-06-30`). |
| start_hour, end_hour | String (yyyy-mm-ddThh:mm) | No | | The time interval to get weather data for hourly or 15 minutely data. Time must be specified as an ISO8601 date (e.g. `2022-06-30T12:00`). |
| models | String array | No | auto | Manually select one or more weather models. Per default, the best suitable weather models will be combined. |
| cell_selection | String | No | land | Set a preference how grid-cells are selected. The default `land` finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. `sea` prefers grid-cells on sea. `nearest` selects the nearest possible grid-cell. |
| apikey | String | No | | Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix `customer-`. See pricing for more information. |

Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!

### Hourly Parameter Definition
The parameter `&hourly=` accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.

| Variable | Valid time | Unit | Description |
|----------|------------|------|-------------|
| temperature_2m | Instant | °C (°F) | Air temperature at 2 meters above ground |
| relative_humidity_2m | Instant | % | Relative humidity at 2 meters above ground |
| dew_point_2m | Instant | °C (°F) | Dew point temperature at 2 meters above ground |
| apparent_temperature | Instant | °C (°F) | Apparent temperature is the perceived feels-like temperature combining wind chill factor, relative humidity and solar radiation |
| pressure_msl, surface_pressure | Instant | hPa | Atmospheric air pressure reduced to mean sea level (msl) or pressure at surface. Typically pressure on mean sea level is used in meteorology. Surface pressure gets lower with increasing elevation. |
| cloud_cover | Instant | % | Total cloud cover as an area fraction |
| cloud_cover_low | Instant | % | Low level clouds and fog up to 3 km altitude |
| cloud_cover_mid | Instant | % | Mid level clouds from 3 to 8 km altitude |
| cloud_cover_high | Instant | % | High level clouds from 8 km altitude |
| wind_speed_10m, wind_speed_80m, wind_speed_120m, wind_speed_180m | Instant | km/h (mph, m/s, knots) | Wind speed at 10, 80, 120 or 180 meters above ground. Wind speed on 10 meters is the standard level. |
| wind_direction_10m, wind_direction_80m, wind_direction_120m, wind_direction_180m | Instant | ° | Wind direction at 10, 80, 120 or 180 meters above ground |
| wind_gusts_10m | Preceding hour max | km/h (mph, m/s, knots) | Gusts at 10 meters above ground as a maximum of the preceding hour |
| shortwave_radiation | Preceding hour mean | W/m² | Shortwave solar radiation as average of the preceding hour. This is equal to the total global horizontal irradiation |
| direct_radiation, direct_normal_irradiance | Preceding hour mean | W/m² | Direct solar radiation as average of the preceding hour on the horizontal plane and the normal plane (perpendicular to the sun) |
| diffuse_radiation | Preceding hour mean | W/m² | Diffuse solar radiation as average of the preceding hour |
| global_tilted_irradiance | Preceding hour mean | W/m² | Total radiation received on a tilted pane as average of the preceding hour. The calculation is assuming a fixed albedo of 20% and in isotropic sky. Please specify tilt and azimuth parameter. Tilt ranges from 0° to 90° and is typically around 45°. Azimuth should be close to 0° (0° south, -90° east, 90° west). If azimuth is set to "nan", the calculation assumes a horizontal tracker. If tilt is set to "nan", it is assumed that the panel has a vertical tracker. If both are set to "nan", a bi-axial tracker is assumed. |
| vapour_pressure_deficit | Instant | kPa | Vapour Pressure Deficit (VPD) in kilopascal (kPa). For high VPD (>1.6), water transpiration of plants increases. For low VPD (<0.4), transpiration decreases |
| cape | Instant | J/kg | Convective available potential energy. See [Wikipedia](https://en.wikipedia.org/wiki/Convective_available_potential_energy). |
| evapotranspiration | Preceding hour sum | mm (inch) | Evapotranspration from land surface and plants that weather models assumes for this location. Available soil water is considered. 1 mm evapotranspiration per hour equals 1 liter of water per spare meter. |
| et0_fao_evapotranspiration | Preceding hour sum | mm (inch) | ET₀ Reference Evapotranspiration of a well watered grass field. Based on FAO-56 Penman-Monteith equations ET₀ is calculated from temperature, wind speed, humidity and solar radiation. Unlimited soil water is assumed. ET₀ is commonly used to estimate the required irrigation for plants. |
| precipitation | Preceding hour sum | mm (inch) | Total precipitation (rain, showers, snow) sum of the preceding hour |
| snowfall | Preceding hour sum | cm (inch) | Snowfall amount of the preceding hour in centimeters. For the water equivalent in millimeter, divide by 7. E.g. 7 cm snow = 10 mm precipitation water equivalent |
| precipitation_probability | Preceding hour probability | % | Probability of precipitation with more than 0.1 mm of the preceding hour. Probability is based on ensemble weather models with 0.25° (~27 km) resolution. 30 different simulations are computed to better represent future weather conditions. |
| rain | Preceding hour sum | mm (inch) | Rain from large scale weather systems of the preceding hour in millimeter |
| showers | Preceding hour sum | mm (inch) | Showers from convective precipitation in millimeters from the preceding hour |
| weather_code | Instant | WMO code | Weather condition as a numeric code. Follow WMO weather interpretation codes. See table below for details. |
| snow_depth | Instant | meters | Snow depth on the ground |
| freezing_level_height | Instant | meters | Altitude above sea level of the 0°C level |
| visibility | Instant | meters | Viewing distance in meters. Influenced by low clouds, humidity and aerosols. |
| soil_temperature_0cm, soil_temperature_6cm, soil_temperature_18cm, soil_temperature_54cm | Instant | °C (°F) | Temperature in the soil at 0, 6, 18 and 54 cm depths. 0 cm is the surface temperature on land or water surface temperature on water. |
| soil_moisture_0_to_1cm, soil_moisture_1_to_3cm, soil_moisture_3_to_9cm, soil_moisture_9_to_27cm, soil_moisture_27_to_81cm | Instant | m³/m³ | Average soil water content as volumetric mixing ratio at 0-1, 1-3, 3-9, 9-27 and 27-81 cm depths. |
| is_day | Instant | Dimensionless | 1 if the current time step has daylight, 0 at night. |

### 15-Minutely Parameter Definition
The parameter `&minutely_15=` can be used to get 15-minutely data. This data is based on NOAA HRRR model for North America and DWD ICON-D2 and Météo-France AROME model for Central Europe. If 15-minutely data is requested for other regions data is interpolated from 1-hourly to 15-minutely.

15-minutely data can be requested for other weather variables that are available for hourly data, but will use interpolation.

| Variable | Valid time | Unit | HRRR | ICON-D2 | AROME |
|----------|------------|------|------|---------|-------|
| temperature_2m | Instant | °C (°F) | x | x | |
| relative_humidity_2m | Instant | % | x | x | |
| dew_point_2m | Instant | °C (°F) | x | x | |
| apparent_temperature | Instant | °C (°F) | x | x | |
| shortwave_radiation | Preceding 15 minutes mean | W/m² | x | x | |
| direct_radiation, direct_normal_irradiance | Preceding 15 minutes mean | W/m² | x | x | |
| global_tilted_irradiance, global_tilted_irradiance_instant | Preceding 15 minutes mean | W/m² | x | x | |
| diffuse_radiation | Preceding 15 minutes mean | W/m² | x | x | |
| sunshine_duration | Preceding 15 minutes sum | seconds | x | x | |
| lightning_potential | Instant | J/kg | | x | |
| precipitation | Preceding 15 minutes sum | mm (inch) | x | x | x |
| snowfall | Preceding 15 minutes sum | cm (inch) | x | x | x |
| rain | Preceding 15 minutes sum | mm (inch) | x | x | x |
| showers | Preceding 15 minutes sum | mm (inch) | | x | |
| snowfall_height | Instant | meters | | x | |
| freezing_level_height | Instant | meters | | x | |
| cape | Instant | J/kg | x | x | x |
| wind_speed_10m, wind_speed_80m | Instant | km/h (mph, m/s, knots) | x | x | |
| wind_direction_10m, wind_direction_80m | Instant | ° | x | x | |
| wind_gusts_10m | Preceding 15 min max | km/h (mph, m/s, knots) | x | | |
| visibility | Instant | meters | x | | |
| weather_code | Instant | WMO code | x | x | |

### Pressure Level Variables
Pressure level variables do not have fixed altitudes. Altitude varies with atmospheric pressure. 1000 hPa is roughly between 60 and 160 meters above sea level. Estimated altitudes are given below. Altitudes are in meters above sea level (not above ground). For precise altitudes, `geopotential_height` can be used.

| Level (hPa) | 1000 | 975 | 950 | 925 | 900 | 850 | 800 | 700 | 600 | 500 | 400 | 300 | 250 | 200 | 150 | 100 | 70 | 50 | 30 |
|-------------|------|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|----|----|----|
| Altitude    | 110 m | 320 m | 500 m | 800 m | 1000 m | 1500 m | 1900 m | 3 km | 4.2 km | 5.6 km | 7.2 km | 9.2 km | 10.4 km | 11.8 km | 13.5 km | 15.8 km | 17.7 km | 19.3 km | 22 km |

All pressure level have valid times of the indicated hour (instant).

| Variable | Unit | Description |
|----------|------|-------------|
| temperature_1000hPa, temperature_975hPa, ... | °C (°F) | Air temperature at the specified pressure level. Air temperatures decrease linearly with pressure. |
| relative_humidity_1000hPa, relative_humidity_975hPa, ... | % | Relative humidity at the specified pressure level. |
| dew_point_1000hPa, dew_point_975hPa, ... | °C (°F) | Dew point temperature at the specified pressure level. |
| cloud_cover_1000hPa, cloud_cover_975hPa, ... | % | Cloud cover at the specified pressure level. Cloud cover is approximated based on relative humidity using Sundqvist et al. (1989). It may not match perfectly with low, mid and high cloud cover variables. |
| wind_speed_1000hPa, wind_speed_975hPa, ... | km/h (mph, m/s, knots) | Wind speed at the specified pressure level. |
| wind_direction_1000hPa, wind_direction_975hPa, ... | ° | Wind direction at the specified pressure level. |
| geopotential_height_1000hPa, geopotential_height_975hPa, ... | meter | Geopotential height at the specified pressure level. This can be used to get the correct altitude in meter above sea level of each pressure level. Be carefull not to mistake it with altitude above ground. |

### Daily Parameter Definition
Aggregations are a simple 24 hour aggregation from hourly values. The parameter `&daily=` accepts the following values:

| Variable | Unit | Description |
|----------|------|-------------|
| temperature_2m_max, temperature_2m_min | °C (°F) | Maximum and minimum daily air temperature at 2 meters above ground |
| apparent_temperature_max, apparent_temperature_min | °C (°F) | Maximum and minimum daily apparent temperature |
| precipitation_sum | mm | Sum of daily precipitation (including rain, showers and snowfall) |
| rain_sum | mm | Sum of daily rain |
| showers_sum | mm | Sum of daily showers |
| snowfall_sum | cm | Sum of daily snowfall |
| precipitation_hours | hours | The number of hours with rain |
| precipitation_probability_max, precipitation_probability_min, precipitation_probability_mean | % | Probability of precipitation |
| weather_code | WMO code | The most severe weather condition on a given day |
| sunrise, sunset | iso8601 | Sun rise and set times |
| sunshine_duration | seconds | The number of seconds of sunshine per day is determined by calculating direct normalized irradiance exceeding 120 W/m², following the WMO definition. Sunshine duration will consistently be less than daylight duration due to dawn and dusk. |
| daylight_duration | seconds | Number of seconds of daylight per day |
| wind_speed_10m_max, wind_gusts_10m_max | km/h (mph, m/s, knots) | Maximum wind speed and gusts on a day |
| wind_direction_10m_dominant | ° | Dominant wind direction |
| shortwave_radiation_sum | MJ/m² | The sum of solar radiation on a given day in Megajoules |
| et0_fao_evapotranspiration | mm | Daily sum of ET₀ Reference Evapotranspiration of a well watered grass field |
| uv_index_max, uv_index_clear_sky_max | Index | Daily maximum in UV Index starting from 0. `uv_index_clear_sky_max` assumes cloud free conditions. Please follow the official WMO guidelines for ultraviolet index. |

### JSON Return Object
On success a JSON object will be returned.

```json
{
  "latitude": 52.52,
  "longitude": 13.419,
  "elevation": 44.812,
  "generationtime_ms": 2.2119,
  "utc_offset_seconds": 0,
  "timezone": "Europe/Berlin",
  "timezone_abbreviation": "CEST",
  "hourly": {
    "time": ["2022-07-01T00:00", "2022-07-01T01:00", "2022-07-01T02:00", ...],
    "temperature_2m": [13, 12.7, 12.7, 12.5, 12.5, 12.8, 13, 12.9, 13.3, ...]
  },
  "hourly_units": {
    "temperature_2m": "°C"
  }
}
```

| Parameter | Format | Description |
|-----------|--------|-------------|
| latitude, longitude | Floating point | WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be a few kilometers away from the requested coordinate. |
| elevation | Floating point | The elevation from a 90 meter digital elevation model. This effects which grid-cell is selected (see parameter `cell_selection`). Statistical downscaling is used to adapt weather conditions for this elevation. This elevation can also be controlled with the query parameter `elevation`. If `&elevation=nan` is specified, all downscaling is disabled and the averge grid-cell elevation is used. |
| generationtime_ms | Floating point | Generation time of the weather forecast in milliseconds. This is mainly used for performance monitoring and improvements. |
| utc_offset_seconds | Integer | Applied timezone offset from the `&timezone=` parameter. |
| timezone, timezone_abbreviation | String | Timezone identifier (e.g. `Europe/Berlin`) and abbreviation (e.g. `CEST`) |
| hourly | Object | For each selected weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps. |
| hourly_units | Object | For each selected weather variable, the unit will be listed here. |
| daily | Object | For each selected daily weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps. |
| daily_units | Object | For each selected daily weather variable, the unit will be listed here. |

### Errors
In case an error occurs, for example a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

```json
{
  "error": true,
  "reason": "Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly"
}
```

### Weather variable documentation
#### WMO Weather interpretation codes (WW)
| Code | Description |
|------|-------------|
| 0 | Clear sky |
| 1, 2, 3 | Mainly clear, partly cloudy, and overcast |
| 45, 48 | Fog and depositing rime fog |
| 51, 53, 55 | Drizzle: Light, moderate, and dense intensity |
| 56, 57 | Freezing Drizzle: Light and dense intensity |
| 61, 63, 65 | Rain: Slight, moderate and heavy intensity |
| 66, 67 | Freezing Rain: Light and heavy intensity |
| 71, 73, 75 | Snow fall: Slight, moderate, and heavy intensity |
| 77 | Snow grains |
| 80, 81, 82 | Rain showers: Slight, moderate, and violent |
| 85, 86 | Snow showers slight and heavy |
| 95 * | Thunderstorm: Slight or moderate |
| 96, 99 * | Thunderstorm with slight and heavy hail |

(*) Thunderstorm forecast with hail is only available in Central Europe
```

```markdown
# Historical Weather API

Discover how weather has shaped our world from 1940 until now.

Now, with the addition of the 9-kilometer ECMWF IFS model, the historical weather API provides access to a staggering 90 terabytes of meteorological data! Read the blog article.

## Location and Time

### Location:
- **Coordinates**:
  - Latitude: 52.52
  - Longitude: 13.41

### Timezone:
- Not set (GMT+0)

### Date Range:
- **Start Date**: 2025-01-25
- **End Date**: 2025-02-08

You can access past weather data dating back to 1940. However, there is a 5-day delay in the data. If you want information for the most recent days, you can use the forecast API and adjust the Past Days setting.

## Quick Access

### Hourly Weather Variables
- Temperature (2 m)
- Relative Humidity (2 m)
- Dewpoint (2 m)
- Apparent Temperature
- Precipitation (rain + snow)
- Rain
- Snowfall
- Snow depth
- Weather code
- Sealevel Pressure
- Surface Pressure
- Cloud cover Total
- Cloud cover Low
- Cloud cover Mid
- Cloud cover High
- Reference Evapotranspiration (ET₀)
- Vapour Pressure Deficit
- Wind Speed (10 m)
- Wind Speed (100 m)
- Wind Direction (10 m)
- Wind Direction (100 m)
- Wind Gusts (10 m)
- Soil Temperature (0-7 cm)
- Soil Temperature (7-28 cm)
- Soil Temperature (28-100 cm)
- Soil Temperature (100-255 cm)
- Soil Moisture (0-7 cm)
- Soil Moisture (7-28 cm)
- Soil Moisture (28-100 cm)
- Soil Moisture (100-255 cm)

### Additional Variables And Options
- Solar Radiation Variables
- ERA5-Ensemble Spread Variables
- Reanalysis models

### Daily Weather Variables
- Weather code
- Maximum Temperature (2 m)
- Minimum Temperature (2 m)
- Mean Temperature (2 m)
- Maximum Apparent Temperature (2 m)
- Minimum Apparent Temperature (2 m)
- Mean Apparent Temperature (2 m)
- Sunrise
- Sunset
- Daylight Duration
- Sunshine Duration
- Precipitation Sum
- Rain Sum
- Snowfall Sum
- Precipitation Hours
- Maximum Wind Speed (10 m)
- Maximum Wind Gusts (10 m)
- Dominant Wind Direction (10 m)
- Shortwave Radiation Sum
- Reference Evapotranspiration (ET₀)

## Settings

- **Temperature Unit**: Celsius (°C)
- **Wind Speed Unit**: Km/h
- **Precipitation Unit**: Millimeter
- **Timeformat**: ISO 8601 (e.g. 2022-12-31)

## Usage License

- **Non-Commercial**: Only for non-commercial use and less than 10,000 daily API calls. See Terms for more details.
- **Commercial**
- **Self-Hosted**

## API Response

### Preview
- Chart And URL
- Python
- Typescript
- Swift
- Other

The sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

### Installation
```bash
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
```

### Usage
```python
import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://archive-api.open-meteo.com/v1/archive"
params = {
    "latitude": 52.52,
    "longitude": 13.41,
    "start_date": "2025-01-25",
    "end_date": "2025-02-08",
    "hourly": "temperature_2m"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
    start=pd.to_datetime(hourly.Time(), unit="s", utc=True),
    end=pd.to_datetime(hourly.TimeEnd(), unit="s", utc=True),
    freq=pd.Timedelta(seconds=hourly.Interval()),
    inclusive="left"
)}

hourly_data["temperature_2m"] = hourly_temperature_2m

hourly_dataframe = pd.DataFrame(data=hourly_data)
print(hourly_dataframe)
```

## Data Sources

The Historical Weather API is based on reanalysis datasets and uses a combination of weather station, aircraft, buoy, radar, and satellite observations to create a comprehensive record of past weather conditions. These datasets are able to fill in gaps by using mathematical models to estimate the values of various weather variables. As a result, reanalysis datasets are able to provide detailed historical weather information for locations that may not have had weather stations nearby, such as rural areas or the open ocean.

The models for historical weather data use a spatial resolution of 9 km to resolve fine details close to coasts or complex mountain terrain. In general, a higher spatial resolution means that the data is more detailed and represents the weather conditions more accurately at smaller scales.

The ECMWF IFS dataset has been meticulously assembled by Open-Meteo using simulation runs at 0z and 12z, employing the most up-to-date version of IFS. This dataset offers the utmost resolution and precision in depicting historical weather conditions.

However, when studying climate change over decades, it is advisable to exclusively utilize ERA5 or ERA5-Land. This choice ensures data consistency and prevents unintentional alterations that could arise from the adoption of different weather model upgrades.

You can access data dating back to 1940 with a delay of 2 days. If you're looking for weather information from the previous day, our Forecast API offers the &past_days= feature for your convenience.

You can find the update timings in the model updates documentation.

### Data Set Details

| Data Set         | Region | Spatial Resolution | Temporal Resolution | Data Availability  | Update frequency    |
|------------------|--------|--------------------|---------------------|---------------------|---------------------|
| ECMWF IFS        | Global | 9 km               | Hourly              | 2017 to present     | Daily with 2 days delay |
| ERA5             | Global | 0.25° (~25 km)     | Hourly              | 1940 to present     | Daily with 5 days delay |
| ERA5-Land        | Global | 0.1° (~11 km)      | Hourly              | 1950 to present     | Daily with 5 days delay |
| ERA5-Ensemble    | Global | 0.5° (~55 km)      | 3-Hourly            | 1940 to present     | Daily with 5 days delay |
| CERRA            | Europe | 5 km               | Hourly              | 1985 to June 2021   | -                   |
| ECMWF IFS Assimilation Long-Window | Global | 9 km | 6-Hourly | 2024 to present | Daily with 2 days delay |

Different reanalysis models may include different sets of weather variables in their datasets. For example, the ERA5 model includes all weather variables, while the ERA5-Land model only includes surface variables such as temperature, humidity, soil temperature, and soil moisture. The CERRA model includes most weather variables, but does not include soil temperature and moisture. It is important to be aware of the specific variables that are included in a particular reanalysis model in order to understand the limitations and potential biases of the data.

## API Documentation

The API endpoint `/v1/archive` allows users to retrieve historical weather data for a specific location and time period. To use this endpoint, you can specify a geographical coordinate, a time interval, and a list of weather variables that they are interested in. The endpoint will then return the requested data in a format that can be easily accessed and used by applications or other software. This endpoint can be very useful for researchers and other users who need to access detailed historical weather data for specific locations and time periods.

### All URL Parameters

| Parameter           | Format           | Required | Default | Description                                                                                     |
|---------------------|------------------|----------|---------|---------------------------------------------------------------------------------------------|
| latitude           | Floating point  | Yes      |         | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. |
| longitude          | Floating point  | Yes      |         | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. |
| elevation          | Floating point  | No       |         | The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. |
| start_date         | String (yyyy-mm-dd) | Yes | | The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-12-31). |
| end_date           | String (yyyy-mm-dd) | Yes | | The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-12-31). |
| hourly             | String array    | No       |         | A list of weather variables which should be returned. Values can be comma separated.           |
| daily              | String array    | No       |         | A list of daily weather variable aggregations which should be returned. Values can be comma separated. |
| temperature_unit   | String           | No       | celsius | If fahrenheit is set, all temperature values are converted to Fahrenheit.                       |
| wind_speed_unit    | String           | No       | kmh     | Other wind speed units: ms, mph and kn                                                         |
| precipitation_unit | String           | No       | mm      | Other precipitation amount units: inch                                                         |
| timeformat         | String           | No       | iso8601 | If format unixtime is selected, all time values are returned in UNIX epoch time in seconds.    |
| timezone           | String           | No       | GMT     | If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. |
| cell_selection     | String           | No       | land    | Set a preference how grid-cells are selected. The default land finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. |
| apikey             | String           | No       |         | Only required for commercial use to access reserved API resources for customers.               |

### Hourly Parameter Definition

The parameter `&hourly=` accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.

| Variable                     | Valid time | Unit       | Description                                                                                     |
|------------------------------|------------|------------|---------------------------------------------------------------------------------------------|
| temperature_2m              | Instant    | °C (°F)    | Air temperature at 2 meters above ground                                                      |
| relative_humidity_2m        | Instant    | %          | Relative humidity at 2 meters above ground                                                    |
| dew_point_2m                | Instant    | °C (°F)    | Dew point temperature at 2 meters above ground                                                 |
| apparent_temperature        | Instant    | °C (°F)    | Apparent temperature is the perceived feels-like temperature combining wind chill factor, relative humidity and solar radiation |
| pressure_msl                | Instant    | hPa        | Atmospheric air pressure reduced to mean sea level (msl)                                     |
| surface_pressure            | Instant    | hPa        | Pressure at surface. Typically pressure on mean sea level is used in meteorology. Surface pressure gets lower with increasing elevation. |
| precipitation               | Preceding hour sum | mm (inch) | Total precipitation (rain, showers, snow) sum of the preceding hour.                          |
| rain                        | Preceding hour sum | mm (inch) | Only liquid precipitation of the preceding hour including local showers and rain from large scale systems. |
| snowfall                    | Preceding hour sum | cm (inch) | Snowfall amount of the preceding hour in centimeters.                                        |
| cloud_cover                 | Instant    | %          | Total cloud cover as an area fraction                                                          |
| cloud_cover_low             | Instant    | %          | Low level clouds and fog up to 2 km altitude                                                 |
| cloud_cover_mid             | Instant    | %          | Mid level clouds from 2 to 6 km altitude                                                      |
| cloud_cover_high            | Instant    | %          | High level clouds from 6 km altitude                                                         |
| shortwave_radiation         | Preceding hour mean | W/m²    | Shortwave solar radiation as average of the preceding hour.                                   |
| direct_radiation            | Preceding hour mean | W/m²    | Direct solar radiation as average of the preceding hour on the horizontal plane and the normal plane (perpendicular to the sun) |
| diffuse_radiation           | Preceding hour mean | W/m²    | Diffuse solar radiation as average of the preceding hour                                     |
| global_tilted_irradiance    | Preceding hour mean | W/m²    | Total radiation received on a tilted pane as average of the preceding hour.                  |
| sunshine_duration           | Preceding hour sum | Seconds  | Number of seconds of sunshine of the preceding hour per hour calculated by direct normalized irradiance exceeding 120 W/m², following the WMO definition. |
| wind_speed_10m              | Instant    | km/h (mph, m/s, knots) | Wind speed at 10 meters above ground.                                                         |
| wind_speed_100m             | Instant    | km/h (mph, m/s, knots) | Wind speed at 100 meters above ground.                                                        |
| wind_direction_10m          | Instant    | °          | Wind direction at 10 meters above ground                                                     |
| wind_direction_100m         | Instant    | °          | Wind direction at 100 meters above ground                                                    |
| wind_gusts_10m              | Instant    | km/h (mph, m/s, knots) | Gusts at 10 meters above ground of the indicated hour.                                        |
| et0_fao_evapotranspiration  | Preceding hour sum | mm (inch) | ET₀ Reference Evapotranspiration of a well watered grass field.                              |
| weather_code                | Instant    | WMO code   | Weather condition as a numeric code. Follow WMO weather interpretation codes.                 |
| snow_depth                  | Instant    | meters     | Snow depth on the ground.                                                                    |
| vapour_pressure_deficit     | Instant    | kPa        | Vapor Pressure Deficit (VPD) in kilopascal (kPa).                                            |
| soil_temperature_0_to_7cm    | Instant    | °C (°F)    | Average temperature of different soil levels below ground.                                    |
| soil_temperature_7_to_28cm   | Instant    | °C (°F)    | Average temperature of different soil levels below ground.                                    |
| soil_temperature_28_to_100cm | Instant    | °C (°F)    | Average temperature of different soil levels below ground.                                    |
| soil_temperature_100_to_255cm | Instant | °C (°F) | Average temperature of different soil levels below ground.                                    |
| soil_moisture_0_to_7cm       | Instant    | m³/m³      | Average soil water content as volumetric mixing ratio at 0-7 cm depth.                       |
| soil_moisture_7_to_28cm      | Instant    | m³/m³      | Average soil water content as volumetric mixing ratio at 7-28 cm depth.                       |
| soil_moisture_28_to_100cm    | Instant    | m³/m³      | Average soil water content as volumetric mixing ratio at 28-100 cm depth.                    |
| soil_moisture_100_to_255cm   | Instant    | m³/m³      | Average soil water content as volumetric mixing ratio at 100-255 cm depth.                     |

### Daily Parameter Definition

Aggregations are a simple 24-hour aggregation from hourly values. The parameter `&daily=` accepts the following values:

| Variable                     | Unit       | Description                                                                                     |
|------------------------------|------------|---------------------------------------------------------------------------------------------|
| weather_code                 | WMO code   | The most severe weather condition on a given day                                               |
| temperature_2m_max           | °C (°F)    | Maximum daily air temperature at 2 meters above ground                                         |
| temperature_2m_min           | °C (°F)    | Minimum daily air temperature at 2 meters above ground                                         |
| apparent_temperature_max     | °C (°F)    | Maximum daily apparent temperature                                                              |
| apparent_temperature_min     | °C (°F)    | Minimum daily apparent temperature                                                              |
| precipitation_sum            | mm         | Sum of daily precipitation (including rain, showers, and snowfall)                             |
| rain_sum                     | mm         | Sum of daily rain                                                                             |
| snowfall_sum                 | cm         | Sum of daily snowfall                                                                         |
| precipitation_hours          | hours      | The number of hours with rain                                                                 |
| sunrise                      | iso8601    | Sunrise time                                                                                   |
| sunset                       | iso8601    | Sunset time                                                                                    |
| sunshine_duration            | seconds    | The number of seconds of sunshine per day                                                     |
| daylight_duration            | seconds    | Number of seconds of daylight per day                                                         |
| wind_speed_10m_max           | km/h (mph, m/s, knots) | Maximum wind speed on a day                                                                  |
| wind_gusts_10m_max           | km/h (mph, m/s, knots) | Maximum wind gusts on a day                                                                   |
| wind_direction_10m_dominant  | °          | Dominant wind direction                                                                        |
| shortwave_radiation_sum      | MJ/m²      | The sum of solar radiation on a given day in Megajoules                                       |
| et0_fao_evapotranspiration   | mm         | Daily sum of ET₀ Reference Evapotranspiration of a well watered grass field                   |

### JSON Return Object

On success, a JSON object will be returned:

```json
{
  "latitude": 52.52,
  "longitude": 13.419,
  "generationtime_ms": 2.2119,
  "timezone": "Europe/Berlin",
  "timezone_abbreviation": "CEST",
  "hourly": {
    "time": ["2022-07-01T00:00", "2022-07-01T01:00", "2022-07-01T02:00", ...],
    "temperature_2m": [13, 12.7, 12.7, 12.5, 12.5, 12.8, 13, 12.9, 13.3, ...]
  },
  "hourly_units": {
    "temperature_2m": "°C"
  }
}
```

### Error Handling

In case an error occurs, for example, a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code:

```json
{
  "error": true,
  "reason": "Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly"
}
```
```

```markdown
# Ensemble API

**Hundreds Of Weather Forecasts, Every time, Everywhere, All at Once**

The initial version of ensemble weather models has been integrated. You can learn more about these models in the [blog article](#).

## Location and Time

### Location:
- **Coordinates**:
  - List: 52.52
  - Latitude: 13.41
  - Longitude: Not set

- **Timezone**: GMT+0

### Time:
- **Forecast Length**: 7 days (default)
- **Forecast days**: 0 (default)
- **Past days**:

## Ensemble Models

- DWD ICON EPS Seamless
- DWD ICON EPS Global
- DWD ICON EPS EU
- DWD ICON EPS D2
- GFS Ensemble Seamless
- GFS Ensemble 0.25
- GFS Ensemble 0.5
- ECMWF IFS 0.4° Ensemble
- ECMWF IFS 0.25° Ensemble
- GEM Global Ensemble
- BOM ACCESS Global
- UK MetOffice Global 20km

## Hourly Weather Variables

- Temperature (2 m)
- Relative Humidity (2 m)
- Dewpoint (2 m)
- Apparent Temperature
- Precipitation (rain + snow)
- Rain
- Snowfall
- Snow Depth
- Weather code
- Sealevel Pressure
- Surface Pressure
- Cloud cover Total
- Visibility
- Reference Evapotranspiration (ET₀)
- Vapour Pressure Deficit
- Wind Speed (10 m)
- Wind Speed (80 m)
- Wind Speed (120 m)
- Wind Direction (10 m)
- Wind Direction (80 m)
- Wind Direction (120 m)
- Wind Gusts (10 m)
- Temperature (80 m)
- Temperature (120 m)
- Surface Temperature
- Soil Temperature (0-10 cm)
- Soil Temperature (10-40 cm)
- Soil Temperature (40-100 cm)
- Soil Temperature (100-200 cm)
- Soil Moisture (0-10 cm)
- Soil Moisture (10-40 cm)
- Soil Moisture (40-100 cm)
- Soil Moisture (100-400 cm)

## Additional Variables And Options

### Solar Radiation Variables

### Settings

- **Temperature Unit**: Celsius °C
- **Wind Speed Unit**: Km/h
- **Precipitation Unit**: Millimeter
- **Timeformat**: ISO 8601 (e.g. 2022-12-31)

## Usage License:

- **Non-Commercial**: Only for non-commercial use and less than 10,000 daily API calls. See Terms for more details.
- **Commercial**
- **Self-Hosted**

## API Response

### Preview:

- **Chart And URL**
- **Python**
- **Typescript**
- **Swift**
- **Other**

The sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

### Install

```bash
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
```

### Usage

```python
import openmeteo_requests
from openmeteo_sdk.Variable import Variable
from openmeteo_sdk.Aggregation import Aggregation
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=3600)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://ensemble-api.open-meteo.com/v1/ensemble"
params = {
    "latitude": 52.52,
    "longitude": 13.41,
    "hourly": "temperature_2m",
    "models": "icon_seamless"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data
hourly = response.Hourly()
hourly_variables = list(map(lambda i: hourly.Variables(i), range(0, hourly.VariablesLength())))

hourly_temperature_2m = filter(lambda x: x.Variable() == Variable.temperature and x.Altitude() == 2, hourly_variables)

hourly_data = {"date": pd.date_range(
    start=pd.to_datetime(hourly.Time(), unit="s", utc=True),
    end=pd.to_datetime(hourly.TimeEnd(), unit="s", utc=True),
    freq=pd.Timedelta(seconds=hourly.Interval()),
    inclusive="left"
)}

# Process all members
for variable in hourly_temperature_2m:
    member = variable.EnsembleMember()
    hourly_data[f"temperature_2m_member{member}"] = variable.ValuesAsNumpy()

hourly_dataframe = pd.DataFrame(data=hourly_data)
print(hourly_dataframe)
```

## Data Source

Ensemble models are a type of weather forecasting technique that use multiple members or versions of a model to produce a range of possible outcomes for a given forecast. Each member is initialized with slightly different initial conditions and/or model parameters to account for uncertainties and variations in the atmosphere, resulting in a set of perturbed forecasts.

By combining the perturbed forecasts, the ensemble model generates a probability distribution of possible outcomes, indicating not only the most likely forecast but also the range of possible outcomes and their likelihoods. This probabilistic approach provides more comprehensive and accurate forecast guidance, especially for high-impact weather events where uncertainties are high.

Different national weather services calculate ensemble models, each with varying resolutions of weather variables and forecast time-range. For instance, the German weather service DWD's ICON model provides exceptionally high resolution for Europe but only forecasts up to 7 days. Meanwhile, the GFS model can forecast up to 35 days, albeit at a lower resolution of 50 km. The appropriate ensemble model to use would depend on the forecast horizon and region of interest.

You can find the update timings in the model updates documentation.

| National Weather Service       | Weather Model       | Region       | Resolution       | Members | Forecast Length | Update frequency |
|--------------------------------|---------------------|--------------|------------------|---------|-----------------|------------------|
| Deutscher Wetterdienst (DWD)   | ICON-D2-EPS         | Central Europe | 2 km, hourly     | 20      | 2 days          | Every 3 hours    |
| ICON-EU-EPS                   | Europe              | 13 km, hourly | 40               | 5 days          | Every 6 hours    |
| ICON-EPS                      | Global              | 26 km, hourly | 40               | 7.5 days        | Every 12 hours   |
| NOAA                          | GFS Ensemble 0.25°  | Global        | 25 km, 3-hourly  | 31      | 10 days         | Every 6 hours    |
| GFS Ensemble 0.5°             | Global              | 50 km, 3-hourly | 31               | 35 days         | Every 6 hours    |
| ECMWF                         | IFS 0.4°            | Global        | 44 km, 3-hourly  | 51      | 15 days         | Every 6 hours    |
| IFS 0.25°                    | Global              | 25 km, 3-hourly | 51               | 15 days         | Every 6 hours    |
| Canadian Weather Service      | GEM                  | Global        | 25 km, 3-hourly  | 21      | 16 days (32 days every Thursday) | Every 12 hours   |
| Australian Bureau of Meteorology (BOM) | ACCESS-GE | Global        | 40 km, 3-hourly  | 18      | 10 days         | Every 6 hours    |
| UK Met Office                 | MOGREPS-G           | Global        | 20 km, 1-hourly  | 18      | 8 days          | Every 6 hours    |

To ensure ease of use, all data is interpolated to a 1-hourly time-step resolution. As the forecast horizon extends further into the future, some ensemble models may reduce the time resolution to 6-hourly intervals.

## API Documentation

The API endpoint `/v1/ensemble` accepts a geographical coordinate, a list of weather variables and responds with a JSON hourly weather forecast for 7 days for each ensemble member. Time always starts at 0:00 today. All URL parameters are listed below:

### Parameter

| Parameter                | Format          | Required | Default | Description                                                                 |
|--------------------------|-----------------|----------|---------|-----------------------------------------------------------------------------|
| latitude, longitude     | Floating point | Yes      |         | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. E.g. `&latitude=52.52,48.85&longitude=13.41,2.35`. To return data for multiple locations the JSON output changes to a list of structures. CSV and XLSX formats add a column `location_id`. |
| models                  | String array    | Yes      |         | Select one or more ensemble weather models as comma-separated list.         |
| elevation               | Floating point  | No       |         | The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If `&elevation=nan` is specified, downscaling will be disabled and the API uses the average grid-cell height. For multiple locations, elevation can also be comma separated. |
| hourly                  | String array    | No       |         | A list of weather variables which should be returned. Values can be comma separated, or multiple `&hourly=` parameter in the URL can be used. |
| temperature_unit        | String          | No       | celsius | If `fahrenheit` is set, all temperature values are converted to Fahrenheit. |
| wind_speed_unit         | String          | No       | kmh     | Other wind speed speed units: ms, mph and kn.                               |
| precipitation_unit      | String          | No       | mm      | Other precipitation amount units: inch.                                      |
| timeformat              | String          | No       | iso8601 | If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamps are in GMT+0! For daily values with unix timestamps, please apply `utc_offset_seconds` again to get the correct date. |
| timezone                | String          | No       | GMT     | If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If `auto` is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified. |
| past_days               | Integer         | No       | 0       | If `past_days` is set, past weather data can be returned.                    |
| forecast_days           | Integer (0-35)  | No       | 7       | Per default, only 7 days are returned. Up to 35 days of forecast are possible. |
| forecast_hours          | Integer (>0)    | No       |         | Similar to `forecast_days`, the number of timesteps of hourly data can be controlled. Instead of using the current day as a reference, the current hour is used. |
| forecast_minutely_15    | Integer (>0)    | No       |         | Similar to `forecast_days`, the number of timesteps of 15-minutely data can be controlled. Instead of using the current day as a reference, the current 15-minute time-step is used. |
| past_hours              | Integer (>0)    | No       |         | Similar to `forecast_days`, the number of timesteps of hourly data can be controlled. Instead of using the current day as a reference, the current hour is used. |
| past_minutely_15        | Integer (>0)    | No       |         | Similar to `forecast_days`, the number of timesteps of 15-minutely data can be controlled. Instead of using the current day as a reference, the current 15-minute time-step is used. |
| start_date              | String (yyyy-mm-dd) | No       |         | The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30). |
| end_date                | String (yyyy-mm-dd) | No       |         | The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30). |
| start_hour              | String (yyyy-mm-ddThh:mm) | No       |         | The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00). |
| end_hour                | String (yyyy-mm-ddThh:mm) | No       |         | The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00). |
| start_minutely_15       | String (yyyy-mm-ddThh:mm) | No       |         | The time interval to get weather data for 15-minutely data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00). |
| end_minutely_15         | String (yyyy-mm-ddThh:mm) | No       |         | The time interval to get weather data for 15-minutely data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00). |
| cell_selection          | String          | No       | land    | Set a preference how grid-cells are selected. The default `land` finds a suitable grid-cell on land with similar elevation to the requested coordinates using a 90-meter digital elevation model. `sea` prefers grid-cells on sea. `nearest` selects the nearest possible grid-cell. |
| apikey                  | String          | No       |         | Only required for commercial use to access reserved API resources for customers. The server URL requires the prefix `customer-`. See pricing for more information. |

Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!

## Hourly Parameter Definition

The parameter `&hourly=` accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.

| Variable                       | Valid time | Unit                     | Description                                                                 |
|--------------------------------|------------|--------------------------|-----------------------------------------------------------------------------|
| temperature_2m                 | Instant    | °C (°F)                  | Air temperature at 2 meters above ground.                                     |
| relative_humidity_2m           | Instant    | %                        | Relative humidity at 2 meters above ground.                                   |
| dew_point_2m                   | Instant    | °C (°F)                  | Dew point temperature at 2 meters above ground.                               |
| apparent_temperature           | Instant    | °C (°F)                  | Apparent temperature is the perceived feels-like temperature combining wind chill factor, relative humidity and solar radiation. |
| pressure_msl                   | Instant    | hPa                      | Atmospheric air pressure reduced to mean sea level (msl).                   |
| surface_pressure               | Instant    | hPa                      | Pressure at surface. Typically pressure on mean sea level is used in meteorology. Surface pressure gets lower with increasing elevation. |
| cloud_cover                    | Instant    | %                        | Total cloud cover as an area fraction.                                       |
| wind_speed_10m                 | Instant    | km/h (mph, m/s, knots)   | Wind speed at 10 meters above ground. Wind speed on 10 meters is the standard level. |
| wind_speed_80m                 | Instant    | km/h (mph, m/s, knots)   | Wind speed at 80 meters above ground.                                       |
| wind_speed_120m                | Instant    | km/h (mph, m/s, knots)   | Wind speed at 120 meters above ground.                                      |
| wind_direction_10m             | Instant    | °                        | Wind direction at 10 meters above ground.                                    |
| wind_direction_80m             | Instant    | °                        | Wind direction at 80 meters above ground.                                    |
| wind_direction_120m            | Instant    | °                        | Wind direction at 120 meters above ground.                                   |
| wind_gusts_10m                 | Preceding hour max | km/h (mph, m/s, knots) | Gusts at 10 meters above ground as a maximum of the preceding hour.          |
| shortwave_radiation            | Preceding hour mean | W/m²                   | Shortwave solar radiation as average of the preceding hour. This is equal to the total global horizontal irradiation. |
| direct_radiation               | Preceding hour mean | W/m²                   | Direct solar radiation as average of the preceding hour on the horizontal plane and the normal plane (perpendicular to the sun). HRRR offers direct radiation directly. In GFS it is approximated based on Razo, Müller Witwer. |
| diffuse_radiation              | Preceding hour mean | W/m²                   | Diffuse solar radiation as average of the preceding hour. HRRR offers diffuse radiation directly. In GFS it is approximated based on Razo, Müller Witwer. |
| global_tilted_irradiance       | Preceding hour mean | W/m²                   | Total radiation received on a tilted pane as average of the preceding hour. The calculation is assuming a fixed albedo of 20% and in isotropic sky. Please specify tilt and azimuth parameter. Tilt ranges from 0° to 90° and is typically around 45°. Azimuth should be close to 0° (0° south, -90° east, 90° west). If azimuth is set to "nan", the calculation assumes a horizontal tracker. If tilt is set to "nan", it is assumed that the panel has a vertical tracker. If both are set to "nan", a bi-axial tracker is assumed. |
| sunshine_duration              | Preceding hour sum | Seconds                | Number of seconds of sunshine of the preceding hour per hour calculated by direct normalized irradiance exceeding 120 W/m², following the WMO definition. |
| vapour_pressure_deficit        | Instant    | kPa                     | Vapor Pressure Deificit (VPD) in kilopascal (kPa). For high VPD (>1.6), water transpiration of plants increases. For low VPD (<0.4), transpiration decreases. |
| evapotranspiration             | Preceding hour sum | mm (inch)              | Evapotranspiration from land surface and plants that weather models assumes for this location. Available soil water is considered. 1 mm evapotranspiration per hour equals 1 liter of water per square meter. |
| et0_fao_evapotranspiration    | Preceding hour sum | mm (inch)              | ET₀ Reference Evapotranspiration of a well watered grass field. Based on FAO-56 Penman-Monteith equations ET₀ is calculated from temperature, wind speed, humidity and solar radiation. Unlimited soil water is assumed. ET₀ is commonly used to estimate the required irrigation for plants. |
| weather_code                   | Instant    | WMO code                | Weather condition as a numeric code. Follow WMO weather interpretation codes. See table below for details. Weather code is calculated from cloud cover analysis, precipitation, snowfall, cape, lifted index and gusts. |
| precipitation                  | Preceding hour sum | mm (inch)              | Total precipitation (rain, showers, snow) sum of the preceding hour.         |
| snowfall                       | Preceding hour sum | cm (inch)              | Snowfall amount of the preceding hour in centimeters. For the water equivalent in millimeter, divide by 7. E.g. 7 cm snow = 10 mm precipitation water equivalent. |
| rain                           | Preceding hour sum | mm (inch)              | Liquid precipitation of the preceding hour in millimeter.                    |
| snow_depth                     | Instant    | meters                  | Snow depth on the ground.                                                    |
| freezing_level_height         | Instant    | meters                  | Altitude above sea level of the 0°C level.                                   |
| visibility                     | Instant    | meters                  | Viewing distance in meters. Influenced by low clouds, humidity and aerosols. |
| cape                           | Instant    | J/kg                    | Convective available potential energy. See Wikipedia.                       |
| surface_temperature            | Instant    | °C (°F)                  | Temperature of the top soil level.                                           |
| soil_temperature_0_to_10cm    | Instant    | °C (°F)                  | Temperature in the soil as an average on 0-10 cm depth.                      |
| soil_temperature_10_to_40cm    | Instant    | °C (°F)                  | Temperature in the soil as an average on 10-40 cm depth.                     |
| soil_temperature_40_to_100cm   | Instant    | °C (°F)                  | Temperature in the soil as an average on 40-100 cm depth.                     |
| soil_temperature_100_to_200cm | Instant    | °C (°F)                  | Temperature in the soil as an average on 100-200 cm depth.                   |
| soil_moisture_0_to_10cm        | Instant    | m³/m³                    | Average soil water content as volumetric mixing ratio at 0-10 cm depth.     |
| soil_moisture_10_to_40cm       | Instant    | m³/m³                    | Average soil water content as volumetric mixing ratio at 10-40 cm depth.     |
| soil_moisture_40_to_100cm      | Instant    | m³/m³                    | Average soil water content as volumetric mixing ratio at 40-100 cm depth.    |
| soil_moisture_100_to_200cm     | Instant    | m³/m³                    | Average soil water content as volumetric mixing ratio at 100-200 cm depth.   |
```

```markdown
# Climate API

Explore Climate Change on a Local Level with High-Resolution Climate Data

Read the blog article with more information about climate models and how data is downscaled to 10 km resolution.

## Location and Time

### Location:
- **Coordinates List:**
  - Latitude: 52.52
  - Longitude: 13.41

- **Timezone:** Not set (GMT+0)

### Time:
- **Start Date:** 1950-01-01
- **End Date:** 2050-12-31

## Quick:

## Daily Weather Variables
- Mean Temperature (2 m)
- Maximum Temperature (2 m)
- Minimum Temperature (2 m)
- Mean Wind Speed (10 m)
- Max Wind Speed (10 m)
- Mean Cloud Cover
- Shortwave Radiation Sum
- Mean Relative Humidity (2 m)
- Maximum Relative Humidity (2 m)
- Minimum Relative Humidity (2 m)
- Mean Dewpoint (2 m)
- Minimum Dewpoint (2 m)
- Maximum Dewpoint (2 m)
- Precipitation Sum
- Rain Sum
- Snowfall Sum
- Sealevel Pressure
- Mean Soil Moisture (0-10 cm)
- Reference Evapotranspiration (ET₀)

## Climate Models
- CMCC_CM2_VHR4 (30 km)
- FGOALS_f3_H (28 km)
- HiRAM_SIT_HR (25 km)
- MRI_AGCM3_2_S (20 km)
- EC_Earth3P_HR (29 km)
- MPI_ESM1_2_XR (51 km)
- NICAM16_8S (31 km)

## Settings
- Raw data. Disable statistical downscaling with ERA5-Land (10 km)

### Units:
- **Temperature Unit:** Celsius °C
- **Wind Speed Unit:** Km/h
- **Precipitation Unit:** Millimeter
- **Timeformat:** ISO 8601 (e.g. 2022-12-31)

## Usage License:
- **Non-Commercial:** Only for non-commercial use and less than 10,000 daily API calls. See Terms for more details.
- **Commercial**
- **Self-Hosted**

## API Response

### Preview:
- Chart And URL
- Python
- Typescript
- Swift
- Other

The sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

### Install
```bash
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
```

### Usage
```python
import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=3600)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://climate-api.open-meteo.com/v1/climate"
params = {
    "latitude": 52.52,
    "longitude": 13.41,
    "start_date": "1950-01-01",
    "end_date": "2050-12-31",
    "models": ["CMCC_CM2_VHR4", "FGOALS_f3_H", "HiRAM_SIT_HR", "MRI_AGCM3_2_S", "EC_Earth3P_HR", "MPI_ESM1_2_XR", "NICAM16_8S"],
    "daily": "temperature_2m_max"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process daily data. The order of variables needs to be the same as requested.
daily = response.Daily()
daily_temperature_2m_max = daily.Variables(0).ValuesAsNumpy()

daily_data = {"date": pd.date_range(
    start=pd.to_datetime(daily.Time(), unit="s", utc=True),
    end=pd.to_datetime(daily.TimeEnd(), unit="s", utc=True),
    freq=pd.Timedelta(seconds=daily.Interval()),
    inclusive="left"
)}

daily_data["temperature_2m_max"] = daily_temperature_2m_max

daily_dataframe = pd.DataFrame(data=daily_data)
print(daily_dataframe)
```

## Data Sources
This API utilizes regional downscaled climate models with up to 20 kilometer resolution from the HighResMip working group, which are part of the IPCC CMIP6 project.

The API offers climate data at a regional, rather than continental, level by downsizing it to a 10 km resolution. This allows for direct comparison of various climate models to identify vulnerable regions to climate change impacts or assessing the impact of climate change on specific sectors, such as agriculture or public health. The reference point used is ERA5-Land, which is accessible through the Historical Weather API.

With typical weather variables in daily resolution data from 1950 to 2050 data allows estimation of common climate parameters like the number of days with temperatures exceeding 30°C or duration and frequency of droughts. Furthermore, daily data enables running of models to predict crop yield, pest infestation, and water balance.

While the data from past and recent years is available, it should not be mistaken for actual measurements, as it serves the purpose of model validation rather than showing actual past weather.

Projections beyond 2050 are highly dependent on different emission scenarios. The high resolution climate models are as close to RCP8.5 as possible within CMIP6. While other models consider different emission scenarios, the variations in these scenarios are less noticeable until 2050. Projections until 2100 are not part of this API.

The climate models available in this API vary in their accuracy and level of uncertainty, and depending on the analysis, some models may be more suitable than others. It is not possible to provide a general recommendation on which model is better. It is recommended to run analyses with multiple models and evaluate their performance afterward.

### Climate Model Details
| Climate Model       | Origin                                                                 | Run by                                                                 | Resolution | Description |
|---------------------|------------------------------------------------------------------------|------------------------------------------------------------------------|-----------|-------------|
| CMCC-CM2-VHR4       | Italy                                                                   | Fondazione Centro Euro-Mediterraneo sui Cambiamenti Climatici, Lecce (CMCC) | 30 km     |             |
| FGOALS_f3_H         | China                                                                   | Chinese Academy of Sciences, Beijing (CAS)                             | 28 km     | Model       |
| HiRAM_SIT_HR        | Taiwan                                                                  | Research Center for Environmental Changes, Academia Sinica, Nankang, Taipei (AS-RCEC) | 25 km     |             |
| MRI_AGCM3_2_S       | Japan                                                                   | Meteorological Research Institute, Tsukuba, Ibaraki (MRI)             | 20 km     |             |
| EC_Earth3P_HR       | Europe                                                                 | EC-Earth consortium, Rossby Center, Swedish Meteorological and Hydrological Institute/SMHI, Norrkoping, Sweden | 29 km     | Model       |
| MPI_ESM1_2_XR       | Germany                                                                | Max Planck Institute for Meteorology, Hamburg 20146, Germany          | 51 km     | Model       |
| NICAM16_8S          | Japan                                                                   | Japan Agency for Marine-Earth Science and Technology, Kanagawa 236-0001, Japan (MIROC) | 31 km     | Model       |

Some weather variables may not be available in all climate models. Notably, soil moisture is only available in MRI-AGCM3-2-S and EC_Earth3P_HR. Additionally, some models may not provide certain aggregations, such as maximum relative humidity. However, mean relative humidity is generally available. The table below outlines the weather variables that are available in each model:

| Model               | Temperature | Relative Humidity | Wind | Precipitation | Snowfall, Solar Radiation & Clouds | Soil moisture |
|---------------------|-------------|--------------------|------|---------------|------------------------------------|---------------|
| CMCC-CM2-VHR4       | ✅           | ✅                  | ✅    | ✅             | ❌                                  | ❌             |
| FGOALS-f3-H         | ✅           | ⚠️                  | ⚠️    | ✅             | ✅                                  | ❌             |
| HiRAM-SIT-HR        | ✅           | ⚠️                  | ⚠️    | ✅             | ✅                                  | ❌             |
| MRI-AGCM3-2-S       | ✅           | ✅                  | ✅    | ✅             | ✅                                  | ✅             |
| EC_Earth3P_HR       | ✅           | ✅                  | ✅    | ✅             | ✅                                  | ✅             |
| MPI_ESM1_2_XR       | ✅           | ⚠️                  | ✅    | ✅             | ✅                                  | ❌             |
| NICAM16_8S          | ✅           | ✅                  | ✅    | ✅             | ✅                                  | ❌             |

## API Documentation

The API endpoint `/v1/climate` allows users to retrieve climate weather data from multiple climate models. To use this endpoint, you can specify a geographical coordinate, a time interval, and a list of weather variables that they are interested in. It is recommended to use the full time range of 1950 to 2050.

### URL Parameters

| Parameter          | Format          | Required | Default | Description                                                                                     |
|--------------------|-----------------|----------|---------|-------------------------------------------------------------------------------------------------|
| latitude           | Floating point  | Yes      |         | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.     |
| longitude          | Floating point  | Yes      |         | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.     |
| start_date         | String (yyyy-mm-dd) | Yes      |         | The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-12-31). |
| end_date           | String (yyyy-mm-dd) | Yes      |         | The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-12-31). |
| models             | String array    | Yes      |         | A list of climate models separated by comma.                                                   |
| daily              | String array    | Yes      |         | A list of daily weather variable aggregations which should be returned.                         |
| temperature_unit   | String          | No       | celsius | If fahrenheit is set, all temperature values are converted to Fahrenheit.                      |
| wind_speed_unit    | String          | No       | kmh     | Other wind speed speed units: ms, mph and kn                                                   |
| precipitation_unit | String          | No       | mm      | Other precipitation amount units: inch                                                         |
| timeformat         | String          | No       | iso8601 | If format unixtime is selected, all time values are returned in UNIX epoch time in seconds.     |
| disable_bias_correction | Bool       | No       | false   | Setting disable_bias_correction to true disables statistical downscaling and bias correction onto ERA5-Land. |
| cell_selection     | String          | No       | land    | Set a preference how grid-cells are selected.                                                  |
| apikey             | String          | No       |         | Only required to commercial use to access reserved API resources for customers.                |

### Daily Parameter Definition

The climate data in this API is presented as daily aggregations. Multiple weather variables can be retrieved at once. The parameter `&daily=` accepts the following values as comma separated list:

| Variable                     | Unit       | Description                                                                                     |
|-----------------------------|------------|-------------------------------------------------------------------------------------------------|
| temperature_2m_max          | °C (°F)    | Maximum daily air temperature at 2 meters above ground.                                        |
| temperature_2m_min          | °C (°F)    | Minimum daily air temperature at 2 meters above ground.                                        |
| temperature_2m_mean         | °C (°F)    | Mean daily air temperature at 2 meters above ground.                                           |
| cloud_cover_mean            | %          | Mean cloud cover on a given day.                                                                |
| relative_humidity_2m_max   | %          | Maximum daily relative humidity at 2 meters above ground.                                       |
| relative_humidity_2m_min   | %          | Minimum daily relative humidity at 2 meters above ground.                                       |
| relative_humidity_2m_mean  | %          | Mean daily relative humidity at 2 meters above ground.                                          |
| soil_moisture_0_to_10cm_mean | m³/m³     | Daily mean soil moisture fraction within 0-10 cm.                                              |
| precipitation_sum           | mm         | Sum of daily precipitation (including rain, showers and snowfall).                              |
| rain_sum                    | mm         | Sum of daily liquid rain, excluding snow.                                                      |
| snowfall_sum                | cm         | Sum of daily snowfall.                                                                         |
| wind_speed_10m_mean         | km/h (mph, m/s, knots) | Mean wind speed 10 meter above ground on a day.                                                |
| wind_speed_10m_max          | km/h (mph, m/s, knots) | Maximum wind speed 10 meter above ground on a day.                                             |
| pressure_msl_mean           | hPa        | Daily mean air pressure reduced to mean sea level.                                             |
| shortwave_radiation_sum     | MJ/m²      | The sum of solar radiation on a given day in Megajoules.                                        |

### JSON Return Object

On success, a JSON object will be returned. Please note: the resulting JSON might be multiple megabytes in size.

```json
{
  "latitude": 52.52,
  "longitude": 13.419,
  "generationtime_ms": 2.2119,
  "timezone": "Europe/Berlin",
  "timezone_abbreviation": "CEST",
  "daily": {
    "time": ["2022-07-01", "2022-07-01", "2022-07-01", ...],
    "temperature_2m_max": [13, 12.7, 12.7, 12.5, 12.5, 12.8, ...]
  },
  "daily_units": {
    "temperature_2m": "°C"
  }
}
```

### Error Handling

In case an error occurs, for example, a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

```json
{
  "error": true,
  "reason": "Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly"
}
```
```

```markdown
# Marine Weather API

## Hourly Wave Forecasts at 5 km Resolution

### Location and Time

**Location:**
- **Coordinates:**
  - Latitude: 54.544587
  - Longitude: 10.227487

**Timezone:**
- Not set (GMT+0)

**Time:**
- **Forecast Length:** 7 days (default)
- **Forecast Days:** 0 (default)
- **Past Days:**

### Hourly Marine Variables

- Wave Height
- Wave Direction
- Wave Period
- Wind Wave Height
- Wind Wave Direction
- Wind Wave Period
- Wind Wave Peak Period
- Swell Wave Height
- Swell Wave Direction
- Swell Wave Period
- Swell Wave Peak Period
- Ocean Current Velocity
- Ocean Current Direction

**Note:** Ocean currents consider Eulerian, Waves, and Tides at 0.08° (~8 km) resolution. This is not suitable for small-scale currents and does not replace your nautical almanac.

### Additional Variables and Options

**Wave Models**

**Daily Marine Variables**

- Wave Height Max
- Wave Direction Dominant
- Wave Period Max
- Wind Wave Height Max
- Wind Wave Direction Dominant
- Wind Wave Period Max
- Wind Wave Peak Period Max
- Swell Wave Height Max
- Swell Wave Direction Dominant
- Swell Wave Period Max
- Swell Wave Peak Period Max

**Current Conditions**

- Wave Height
- Wave Direction
- Wave Period
- Wind Wave Height
- Wind Wave Direction
- Wind Wave Period
- Wind Wave Peak Period
- Swell Wave Height
- Swell Wave Direction
- Swell Wave Period
- Swell Wave Peak Period
- Ocean Current Velocity
- Ocean Current Direction

### Settings

- **Metric**
- **Length Unit:** Km/h
- **Velocity Unit:**
- **Time Format:** ISO 8601 (e.g., 2022-12-31)

**Usage License:**
- Non-Commercial
- Commercial
- Self-Hosted

Only for non-commercial use and less than 10,000 daily API calls. See Terms for more details.

### API Response

**Preview:**
- Chart and URL
- Python
- Typescript
- Swift
- Other

The sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

### Installation

```bash
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
```

### Usage

```python
import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=3600)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://marine-api.open-meteo.com/v1/marine"
params = {
    "latitude": 54.544587,
    "longitude": 10.227487,
    "hourly": "wave_height"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_wave_height = hourly.Variables(0).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
    start=pd.to_datetime(hourly.Time(), unit="s", utc=True),
    end=pd.to_datetime(hourly.TimeEnd(), unit="s", utc=True),
    freq=pd.Timedelta(seconds=hourly.Interval()),
    inclusive="left"
)}

hourly_data["wave_height"] = hourly_wave_height

hourly_dataframe = pd.DataFrame(data=hourly_data)
print(hourly_dataframe)
```

### Data Sources

The Marine API combines wave models from different sources. You can find the update timings in the model updates documentation.

| Data Set                | Region                  | Spatial Resolution | Temporal Resolution | Data Availability                    | Update Frequency   |
|-------------------------|-------------------------|--------------------|---------------------|--------------------------------------|--------------------|
| MeteoFrance MFWAM      | Global                  | 0.08° (~8 km)      | 3-Hourly             | October 2021 with 10 day forecast    | Every 12 hours     |
| MeteoFrance SMOC Currents | Global                  | 0.08° (~8 km)      | Hourly               | January 2022 with 10 day forecast   | Every 24 hours     |
| ECMWF WAM              | Global                  | 0.25° (~25 km)     | 3-Hourly             | March 2024 with 10 day forecast     | Every 6 hours      |
| NCEP GFS Wave          | Global                  | 0.25° (~25 km)     | Hourly               | June 2024 with 16 day forecast      | Every 6 hours      |
| NCEP GFS Wave          | Latitude 52.5°N - 15°S | 0.16° (~16 km)     | Hourly               | October 2024 with 16 day forecast   | Every 6 hours      |
| DWD GWAM               | Europe                  | 0.05° (~5 km)      | Hourly               | August 2022 with 8 day forecast     | Twice daily        |
| DWD EWAM               | Global                  | 0.25° (~25 km)     | Hourly               | August 2022 with 4 day forecast      | Twice daily        |
| ERA5-Ocean             | Global                  | 0.5° (~50 km)      | Hourly               | 1940 to present                     | Daily with 5 days delay |

### API Documentation

The API endpoint `/v1/marine` accepts a geographical coordinate, a list of marine variables, and responds with a JSON hourly marine weather forecast for 7 days. Time always starts at 0:00 today. All URL parameters are listed below:

| Parameter          | Format           | Required | Default | Description                                                                                     |
|---------------------|------------------|----------|---------|-------------------------------------------------------------------------------------------------|
| latitude, longitude | Floating point   | Yes      |         | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.   |
| hourly              | String array     | No       |         | A list of weather variables which should be returned.                                          |
| daily               | String array     | No       |         | A list of daily weather variable aggregations which should be returned.                        |
| current             | String array     | No       |         | A list of variables to get current conditions.                                                 |
| timeformat          | String           | No       | iso8601 | If format unixtime is selected, all time values are returned in UNIX epoch time in seconds.    |
| timezone            | String           | No       | GMT     | If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. |
| past_days           | Integer (0-92)   | No       | 0       | If past_days is set, yesterday or the day before yesterday data are also returned.           |
| forecast_days       | Integer (0-8)    | No       | 5       | Per default, 7 days are returned. Up to 8 days of forecast are possible.                      |
| forecast_hours      | Integer (>0)     | No       |         | Similar to forecast_days, the number of timesteps of hourly data can controlled.               |
| past_hours          | Integer (>0)     | No       |         | Similar to forecast_days, the number of timesteps of hourly data can controlled.               |
| start_date          | String (yyyy-mm-dd) | No       |         | The time interval to get weather data. A day must be specified as an ISO8601 date.             |
| end_date            | String (yyyy-mm-dd) | No       |         | The time interval to get weather data. A day must be specified as an ISO8601 date.             |
| start_hour          | String (yyyy-mm-ddThh:mm) | No |         | The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date. |
| end_hour            | String (yyyy-mm-ddThh:mm) | No |         | The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date. |
| length_unit         | String           | No       | metric  | Options metric and imperial                                                                   |
| cell_selection      | String           | No       | sea     | Set a preference how grid-cells are selected.                                                 |
| apikey              | String           | No       |         | Only required for commercial use to access reserved API resources for customers.               |

### Hourly Parameter Definition

The parameter `&hourly=` accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.

| Variable                     | Valid Time | Unit    | Description                                                                                     |
|------------------------------|------------|---------|-------------------------------------------------------------------------------------------------|
| wave_height                  | Instant    | Meter   | Wave height of significant mean, wind, and swell waves.                                        |
| wind_wave_height             | Instant    | Meter   | Wind wave height.                                                                               |
| swell_wave_height            | Instant    | Meter   | Swell wave height.                                                                               |
| wave_direction               | Instant    | °       | Mean direction of mean, wind, and swell waves.                                                  |
| wind_wave_direction          | Instant    | °       | Wind wave direction.                                                                             |
| swell_wave_direction         | Instant    | °       | Swell wave direction.                                                                            |
| wave_period                  | Instant    | Seconds | Period between mean, wind, and swell waves.                                                     |
| wind_wave_period             | Instant    | Seconds | Wind wave period.                                                                               |
| swell_wave_period            | Instant    | Seconds | Swell wave period.                                                                               |
| wind_wave_peak_period        | Instant    | Seconds | Peak period between wind waves.                                                                 |
| swell_wave_peak_period       | Instant    | Seconds | Peak period between swell waves.                                                                 |
| ocean_current_velocity       | Instant    | km/h    | Velocity of ocean current considering Eulerian, Waves, and Tides.                               |
| ocean_current_direction      | Instant    | °       | Direction following the flow of the current.                                                    |

### Daily Parameter Definition

Aggregations are a simple 24-hour aggregation from hourly values. The parameter `&daily=` accepts the following values:

| Variable                     | Unit    | Description                                                                                     |
|------------------------------|---------|-------------------------------------------------------------------------------------------------|
| wave_height_max              | Meter   | Maximum wave height on a given day for mean, wind, and swell waves.                             |
| wind_wave_height_max         | Meter   | Maximum wind wave height on a given day.                                                       |
| swell_wave_height_max        | Meter   | Maximum swell wave height on a given day.                                                       |
| wave_direction_dominant      | °       | Dominant wave direction of mean, wind, and swell waves.                                          |
| wind_wave_direction_dominant | °       | Dominant wind wave direction on a given day.                                                   |
| swell_wave_direction_dominant | °     | Dominant swell wave direction on a given day.                                                   |
| wave_period_max              | Seconds | Maximum wave period of mean, wind, and swell waves.                                             |
| wind_wave_period_max         | Seconds | Maximum wind wave period on a given day.                                                       |
| swell_wave_period_max        | Seconds | Maximum swell wave period on a given day.                                                       |
| wind_wave_peak_period_max    | Seconds | Maximum peak period between wind waves.                                                         |
| swell_wave_peak_period_max   | Seconds | Maximum peak period between swell waves.                                                        |

### JSON Return Object

On success, a JSON object will be returned.

```json
{
  "latitude": 52.52,
  "longitude": 13.419,
  "elevation": 44.812,
  "generationtime_ms": 2.2119,
  "utc_offset_seconds": 0,
  "timezone": "Europe/Berlin",
  "timezone_abbreviation": "CEST",
  "hourly": {
    "time": ["2022-07-01T00:00", "2022-07-01T01:00", "2022-07-01T02:00", ...],
    "wave_height": [1, 1.7, 1.7, 1.5, 1.5, 1.8, 2.0, 1.9, 1.3, ...]
  },
  "hourly_units": {
    "wave_height": "m"
  }
}
```

### Errors

In case an error occurs, for example, a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

```json
{
  "error": true,
  "reason": "Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly"
}
```
```

```markdown
# Air Quality API

## Pollutants and Pollen Forecast in 11 km Resolution

### Location and Time

**Location:**
- **Coordinates:**
  - **List:**
    - Latitude: 52.52
    - Longitude: 13.41

**Timezone:**
- Not set (GMT+0)

**Time:**
- **Forecast Length:** 5 days (default)
- **Forecast Days:** 0 (default)
- **Past Days:**

### Hourly Air Quality Variables

- Particulate Matter PM10
- Particulate Matter PM2.5
- Carbon Monoxide CO
- Carbon Dioxide CO2
- Nitrogen Dioxide NO2
- Sulphur Dioxide SO2
- Ozone O3
- Aerosol Optical Depth
- Dust
- UV Index
- UV Index Clear Sky
- Ammonia NH3 (*)
- Methane CH4
- Alder Pollen (*)
- Birch Pollen (*)
- Grass Pollen (*)
- Mugwort Pollen (*)
- Olive Pollen (*)
- Ragweed Pollen (*)

*Only available in Europe during pollen season with 4 days forecast

### European Air Quality Index
### United States Air Quality Index

### Additional Variables and Options

- **Current Conditions**
- **European AQI**
- **United States AQI**
- **Particulate Matter PM10**
- **Particulate Matter PM2.5**
- **Carbon Monoxide CO**
- **Nitrogen Dioxide NO2**
- **Sulphur Dioxide SO2**
- **Ozone O3**
- **Aerosol Optical Depth**
- **Dust**
- **UV Index**
- **UV Index Clear Sky**
- **Ammonia NH3 (*)**
- **Alder Pollen (*)**
- **Birch Pollen (*)**
- **Grass Pollen (*)**
- **Mugwort Pollen (*)**
- **Olive Pollen (*)**
- **Ragweed Pollen (*)**

### Settings

- **Domain:** Global + European
- **Timeformat:** ISO 8601 (e.g., 2022-12-31)

### Usage License:

- **Non-Commercial**
- **Commercial**
- **Self-Hosted**

Only for non-commercial use and less than 10,000 daily API calls. See Terms for more details.

### API Response

**Preview:**
- Chart And URL
- Python
- Typescript
- Swift
- Other

The sample code automatically applies all the parameters selected above. It includes caching and the conversion to Pandas DataFrames. The use of DataFrames is entirely optional. You can find further details and examples in the Python API client documentation.

### Install

```bash
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
```

### Usage

```python
import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=3600)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://air-quality-api.open-meteo.com/v1/air-quality"
params = {
    "latitude": 52.52,
    "longitude": 13.41,
    "hourly": ["pm10", "pm2_5"]
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_pm10 = hourly.Variables(0).ValuesAsNumpy()
hourly_pm2_5 = hourly.Variables(1).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
    start=pd.to_datetime(hourly.Time(), unit="s", utc=True),
    end=pd.to_datetime(hourly.TimeEnd(), unit="s", utc=True),
    freq=pd.Timedelta(seconds=hourly.Interval()),
    inclusive="left"
)}

hourly_data["pm10"] = hourly_pm10
hourly_data["pm2_5"] = hourly_pm2_5

hourly_dataframe = pd.DataFrame(data=hourly_data)
print(hourly_dataframe)
```

### Data Sources

Forecast is based on the 11 kilometer CAMS European air quality forecast and the 40 kilometer CAMS global atmospheric composition forecasts. The European and global domain are not coupled and may show different forecasts.

You can find the update timings in the model updates documentation.

| Data Set                                | Region   | Spatial Resolution | Temporal Resolution | Data Availability  | Update Frequency                     |
|----------------------------------------|----------|--------------------|---------------------|--------------------|--------------------------------------|
| CAMS European Air Quality Forecast      | Europe   | 0.1° (~11 km)      | 1-Hourly            | October 2023 onwards| Every 24 hours, 4 days forecast     |
| CAMS European Air Quality Reanalysis   | Europe   | 0.1° (~11 km)      | Hourly              | 2013 onwards       | -                                    |
| CAMS Global Atmospheric Composition Forecasts | Global  | 0.25° (~25 km)    | 3-Hourly            | August 2022 onwards| Every 12 hours, 5 days forecast     |
| CAMS Global Greenhouse Gas Forecast     | Global   | 0.1° (~11 km)      | 3-Hourly            | November 2024 onwards| Every 24 hours, 5 days forecast     |

### API Documentation

The API endpoint `/v1/air-quality` accepts a geographical coordinate, a list of weather variables, and responds with a JSON hourly air quality forecast for 5 days. Time always starts at 0:00 today.

#### All URL Parameters

| Parameter          | Format                  | Required | Default | Description                                                                                     |
|--------------------|-------------------------|----------|---------|-------------------------------------------------------------------------------------------------|
| latitude, longitude| Floating point          | Yes      |         | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated.     |
| hourly             | String array            | No       |         | A list of weather variables which should be returned.                                            |
| current            | String array            | No       |         | A list of variables to get current conditions.                                                  |
| domains            | String                  | No       | auto    | Automatically combine both domains auto or specifically select the European `cams_europe` or global domain `cams_global`. |
| timeformat         | String                  | No       | iso8601 | If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds.   |
| timezone           | String                  | No       | GMT     | If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. |
| past_days          | Integer (0-92)          | No       | 0       | If past_days is set, yesterday or the day before yesterday data are also returned.             |
| forecast_days      | Integer (0-7)          | No       | 5       | Per default, 5 days are returned. Up to 7 days of forecast are possible.                        |
| forecast_hours     | Integer (>0)           | No       |         | Similar to forecast_days, the number of timesteps of hourly data can controlled.                |
| past_hours         | Integer (>0)           | No       |         | Similar to forecast_days, the number of timesteps of hourly data can controlled.                |
| start_date         | String (yyyy-mm-dd)     | No       |         | The time interval to get weather data. A day must be specified as an ISO8601 date (e.g., 2022-06-30). |
| end_date           | String (yyyy-mm-dd)     | No       |         | The time interval to get weather data. A day must be specified as an ISO8601 date (e.g., 2022-06-30). |
| start_hour         | String (yyyy-mm-ddThh:mm)| No       |         | The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date (e.g., 2022-06-30T12:00). |
| end_hour           | String (yyyy-mm-ddThh:mm)| No       |         | The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date (e.g., 2022-06-30T12:00). |
| cell_selection      | String                  | No       | nearest | Set a preference how grid-cells are selected.                                                    |
| apikey             | String                  | No       |         | Only required for commercial use to access reserved API resources for customers.                |

Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!

### Hourly Parameter Definition

The parameter `&hourly=` accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.

| Variable                    | Valid Time | Unit       | Description                                                                                     |
|-----------------------------|------------|------------|-------------------------------------------------------------------------------------------------|
| pm10                       | Instant    | μg/m³      | Particulate matter with diameter smaller than 10 µm (PM10) close to surface (10 meter above ground) |
| pm2_5                      | Instant    | μg/m³      | Particulate matter with diameter smaller than 2.5 µm (PM2.5) close to surface (10 meter above ground) |
| carbon_monoxide            | Instant    | μg/m³      | Atmospheric gas close to surface (10 meter above ground)                                        |
| nitrogen_dioxide           | Instant    | μg/m³      | Atmospheric gas close to surface (10 meter above ground)                                        |
| sulphur_dioxide            | Instant    | μg/m³      | Atmospheric gas close to surface (10 meter above ground)                                        |
| ozone                      | Instant    | μg/m³      | Atmospheric gas close to surface (10 meter above ground)                                        |
| carbon_dioxide             | Instant    | ppm        | CO2 close to surface (10 meter above ground)                                                    |
| ammonia                    | Instant    | μg/m³      | Ammonia concentration. Only available for Europe.                                               |
| aerosol_optical_depth     | Instant    | Dimensionless | Aerosol optical depth at 550 nm of the entire atmosphere to indicate haze.                     |
| methane                    | Instant    | μg/m³      | Methane close to surface (10 meter above ground)                                                |
| dust                       | Instant    | μg/m³      | Saharan dust particles close to surface level (10 meter above ground).                         |
| uv_index                   | Instant    | Index      | UV index considering clouds.                                                                   |
| uv_index_clear_sky        | Instant    | Index      | UV index considering clear sky.                                                                 |
| alder_pollen               | Instant    | Grains/m³  | Pollen for various plants. Only available in Europe as provided by CAMS European Air Quality forecast. |
| birch_pollen               | Instant    | Grains/m³  | Pollen for various plants. Only available in Europe as provided by CAMS European Air Quality forecast. |
| grass_pollen               | Instant    | Grains/m³  | Pollen for various plants. Only available in Europe as provided by CAMS European Air Quality forecast. |
| mugwort_pollen             | Instant    | Grains/m³  | Pollen for various plants. Only available in Europe as provided by CAMS European Air Quality forecast. |
| olive_pollen               | Instant    | Grains/m³  | Pollen for various plants. Only available in Europe as provided by CAMS European Air Quality forecast. |
| ragweed_pollen             | Instant    | Grains/m³  | Pollen for various plants. Only available in Europe as provided by CAMS European Air Quality forecast. |
| european_aqi               | Instant    | European AQI | European Air Quality Index (AQI) calculated for different particulate matter and gases individually. |
| european_aqi_pm2_5         | Instant    | European AQI | European Air Quality Index (AQI) calculated for PM2.5.                                          |
| european_aqi_pm10          | Instant    | European AQI | European Air Quality Index (AQI) calculated for PM10.                                           |
| european_aqi_nitrogen_dioxide | Instant | European AQI | European Air Quality Index (AQI) calculated for nitrogen dioxide.                             |
| european_aqi_ozone         | Instant    | European AQI | European Air Quality Index (AQI) calculated for ozone.                                        |
| european_aqi_sulphur_dioxide | Instant | European AQI | European Air Quality Index (AQI) calculated for sulphur dioxide.                              |
| us_aqi                     | Instant    | U.S. AQI    | United States Air Quality Index (AQI) calculated for different particulate matter and gases individually. |
| us_aqi_pm2_5               | Instant    | U.S. AQI    | United States Air Quality Index (AQI) calculated for PM2.5.                                    |
| us_aqi_pm10                | Instant    | U.S. AQI    | United States Air Quality Index (AQI) calculated for PM10.                                      |
| us_aqi_nitrogen_dioxide    | Instant    | U.S. AQI    | United States Air Quality Index (AQI) calculated for nitrogen dioxide.                         |
| us_aqi_ozone               | Instant    | U.S. AQI    | United States Air Quality Index (AQI) calculated for ozone.                                    |
| us_aqi_sulphur_dioxide     | Instant    | U.S. AQI    | United States Air Quality Index (AQI) calculated for sulphur dioxide.                        |
| us_aqi_carbon_monoxide     | Instant    | U.S. AQI    | United States Air Quality Index (AQI) calculated for carbon monoxide.                         |

### JSON Return Object

On success, a JSON object will be returned.

```json
{
  "latitude": 52.52,
  "longitude": 13.419,
  "elevation": 44.812,
  "generationtime_ms": 2.2119,
  "utc_offset_seconds": 0,
  "timezone": "Europe/Berlin",
  "timezone_abbreviation": "CEST",
  "hourly": {
    "time": ["2022-07-01T00:00", "2022-07-01T01:00", "2022-07-01T02:00", ...],
    "pm10": [1, 1.7, 1.7, 1.5, 1.5, 1.8, 2.0, 1.9, 1.3, ...]
  },
  "hourly_units": {
    "pm10": "μg/m³"
  }
}
```

#### Parameters

| Parameter                   | Format     | Description                                                                                     |
|-----------------------------|------------|-------------------------------------------------------------------------------------------------|
| latitude, longitude         | Floating point | WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be a few kilometers away from the requested coordinate. |
| generationtime_ms           | Floating point | Generation time of the weather forecast in milliseconds. This is mainly used for performance monitoring and improvements. |
| utc_offset_seconds          | Integer    | Applied timezone offset from the `&timezone=` parameter.                                        |
| timezone                    | String     | Timezone identifier (e.g., Europe/Berlin).                                                     |
| timezone_abbreviation       | String     | Timezone abbreviation (e.g., CEST).                                                              |
| hourly                      | Object     | For each selected weather variable, data will be returned as a floating point array. Additionally, a time array will be returned with ISO8601 timestamps. |
| hourly_units                | Object     | For each selected weather variable, the unit will be listed here.                               |

### Errors

In case an error occurs, for example, a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

```json
{
  "error": true,
  "reason": "Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly"
}
```
```

```markdown
# Geocoding API

Search locations globally in any language

## Quick Start Example

### Search Parameters
- **Name**: Berlin
- **Language**: English  
- **Number of results**: 10
- **Format**: json

### Usage License
- Non-Commercial
- Commercial
- Self-Hosted

*Only for non-commercial use and less than 10,000 daily API calls. See Terms for more details.*

### Preview Results

| Name | Latitude | Longitude | Elevation | Population | Admin1 | Admin2 | Admin3 | Admin4 | Feature code |
|------|----------|-----------|-----------|------------|---------|---------|---------|---------|--------------|
| Berlin | 52.52437 | 13.41053 | 74 | 3426354 | Land Berlin | | Berlin, Stadt | Berlin | PPLC |
| Berlin | 44.46867 | -71.18508 | 311 | 9367 | New Hampshire | Coos | City of Berlin | | PPL |
| Berlin | 39.79123 | -74.92905 | 50 | 7590 | New Jersey | Camden | Borough of Berlin | | PPL |
| Berlin | 43.96804 | -88.94345 | 246 | 5420 | Wisconsin | Green Lake | City of Berlin | | PPL |
| Berlin | 38.32262 | -75.21769 | 11 | 4529 | Maryland | Worcester | | | PPL |
| Berlin | 42.3812 | -71.63701 | 100 | 2422 | Massachusetts | Worcester | Town of Berlin | | PPL |
| Berlin | 39.92064 | -78.9578 | 710 | 2019 | Pennsylvania | Somerset | Borough of Berlin | | PPL |
| East Berlin | 39.9376 | -76.97859 | 131 | 1534 | Pennsylvania | Adams | Borough of East Berlin | | PPL |
| Berlin | 40.56117 | -81.7943 | 391 | 898 | Ohio | Holmes | Berlin Township | | PPL |
| Berlin | 54.00603 | 61.19308 | 228 | 613 | Chelyabinsk | Troitskiy Rayon | | | PPL |

### API URL
```
https://geocoding-api.open-meteo.com/v1/search?name=Berlin&count=10&language=en&format=json
```

*You can copy this API URL into your application*

## API Documentation

The API endpoint `https://geocoding-api.open-meteo.com/v1/search` accepts a search term and returns a list of matching locations. URL parameters are listed below:

### Parameters

| Parameter | Format | Required | Default | Description |
|-----------|---------|-----------|----------|-------------|
| name | String | Yes | | String to search for. An empty string or only 1 character will return an empty result. 2 characters will only match exact matching locations. 3 and more characters will perform fuzzy matching. The search string can be a location name or a postal code. |
| count | Integer | No | 10 | The number of search results to return. Up to 100 results can be retrieved. |
| format | String | No | json | By default, results are returned as JSON. Alternatively, protobuf is supported for more efficient encoding and transfer. The .proto file to decode the protobuf message is available in the geocoding GitHub repository. |
| language | String | No | en | Return translated results, if available, otherwise return english or the native location name. Lower-cased. |
| apikey | String | No | | Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information. |

*Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!*

## JSON Return Object

On success a JSON object will be returned. Empty fields are not returned. E.g. admin4 will be missing if no fourth administrative level is available.

```json
{
  "results": [
    {
      "id": 2950159,
      "name": "Berlin",
      "latitude": 52.52437,
      "longitude": 13.41053,
      "elevation": 74.0,
      "feature_code": "PPLC",
      "country_code": "DE",
      "admin1_id": 2950157,
      "admin2_id": 0,
      "admin3_id": 6547383,
      "admin4_id": 6547539,
      "timezone": "Europe/Berlin",
      "population": 3426354,
      "postcodes": [
        "10967",
        "13347"
      ],
      "country_id": 2921044,
      "country": "Deutschland",
      "admin1": "Berlin",
      "admin2": "",
      "admin3": "Berlin, Stadt",
      "admin4": "Berlin"
    },
    {
      "..."
    }
  ]
}
```

### Return Parameters

| Parameter | Format | Description |
|-----------|---------|-------------|
| id | Integer | Unique ID for this location |
| name | String | Location name. Localized following the &language= parameter, if possible |
| latitude, longitude | Floating point | Geographical WGS84 coordinates of this location |
| elevation | Floating point | Elevation above mean sea level of this location |
| timezone | String | Time zone using time zone database definitions |
| feature_code | String | Type of this location. Following the GeoNames feature_code definition |
| country_code | String | 2-Character FIPS country code. E.g. DE for Germany |
| country | String | Country name. Localized following the &language= parameter, if possible |
| country_id | Integer | Unique ID for this country |
| population | Integer | Number of inhabitants |
| postcodes | String array | List of postcodes for this location |
| admin1, admin2, admin3, admin4 | String | Name of hierarchical administrative areas this location resides in. Admin1 is the first administrative level. Admin2 the second administrative level. Localized following the &language= parameter, if possible |
| admin1_id, admin2_id, admin3_id, admin4_id | Integer | Unique IDs for the administrative areas |

*Note: All IDs can be resolved via the API endpoint `https://geocoding-api.open-meteo.com/v1/get?id=2950159`*

## Errors

In case an error occurs, for example a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

```json
{
  "error": true,
  "reason": "Parameter count must be between 1 and 100."
}
```

## Attribution

- Location data based on GeoNames
- Country flags from HatScripts/circle-flags
```

```markdown
# Elevation API
90 meter resolution digital elevation model

Get more information on how weather forecasts are improved with elevation models in our blog article.

## Select Coordinates or City
- Latitude: 52,52
- Longitude: 13,41

## Usage License
- Non-Commercial
- Commercial
- Self-Hosted

Only for non-commercial use and less than 10.000 daily API calls. See Terms for more details.

```json
{"elevation":[38.0]}
```

## API URL (Open in new tab)
https://api.open-meteo.com/v1/elevation?latitude=52.52&longitude=13.41

You can copy this API URL into your application

## API Documentation
The API endpoint /v1/elevation accepts one or multiple geographical coordinate and returns the terrain elevation for those points.

Data is based on the Copernicus DEM 2021 release GLO-90 with 90 meters resolution. The GLO-90 dataset is available worldwide with a free license.

All URL parameters are listed below:

### Parameters

| Parameter | Format | Required | Default | Description |
|-----------|---------|-----------|----------|-------------|
| latitude, longitude | Floating point array | Yes | | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma , separated. Up to 100 coordinates can be requested at once. Example for multiple coordinates. |
| apikey | String | No | | Only required to commercial use to access reserved API resources for customers. The server URL requires the prefix customer-. See pricing for more information. |

Additional optional URL parameters will be added. For API stability, no required parameters will be added in the future!

## JSON Return Object
On success a JSON object is returned with just one attribute elevation. It is always an array, even if only one coordinate is requested.

```json
{
  "elevation": [38.0]
}
```

## Errors
In case an error occurs, for example a URL parameter is not correctly specified, a JSON error object is returned with a HTTP 400 status code.

```json
{
  "error": true,
  "reason": "Latitude must be in range of -90 to 90°. Given: 522.52."
}
```
```

```markdown
# Global Flood API

Simulated river discharge at 5 km resolution from 1984 up to 7 months forecast

## Location and Time

### Location Parameters
- **Coordinates**
  - Latitude: 59.91
  - Longitude: 10.75
- **Timezone**: Not set (GMT+0)

### Time Parameters
- **Forecast Length**: 3 months (default)
- **Past days**: 0 (default)

## Daily Weather Variables

- River Discharge
- River Discharge Mean
- River Discharge Median
- River Discharge Maximum
- River Discharge Minimum
- River Discharge 25th Percentile
- River Discharge 75th Percentile
- All 50 Ensemble Members

*Note: Statistical and ensemble forecasts are only available for forecasts.*

## Flood Models Settings

- **Timeformat**: ISO 8601 (e.g. 2022-12-31)

### Usage License Types
- Non-Commercial
- Commercial
- Self-Hosted

*Only for non-commercial use and less than 10,000 daily API calls. See Terms for more details.*

## API Implementation

### Installation

```bash
pip install openmeteo-requests
pip install requests-cache retry-requests numpy pandas
```

### Python Usage Example

```python
import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
url = "https://flood-api.open-meteo.com/v1/flood"
params = {
    "latitude": 59.91,
    "longitude": 10.75,
    "daily": "river_discharge",
    "timezone": "UTC"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process daily data
daily = response.Daily()
daily_river_discharge = daily.Variables(0).ValuesAsNumpy()

daily_data = {"date": pd.date_range(
    start = pd.to_datetime(daily.Time(), unit = "s", utc = True),
    end = pd.to_datetime(daily.TimeEnd(), unit = "s", utc = True),
    freq = pd.Timedelta(seconds = daily.Interval()),
    inclusive = "left"
)}

daily_data["river_discharge"] = daily_river_discharge
daily_dataframe = pd.DataFrame(data = daily_data)
print(daily_dataframe)
```

## Data Source

This API uses reanalysis and forecast data from the Global Flood Awareness System (GloFAS). By default, GloFAS version 4 with seamless data from 1984 until 7 months of forecast is used.

**Important Note**: Due to the 5 km resolution, the closest river might not be selected correctly. Varying coordinates by 0.1° can help to get a more representative discharge rate. The GloFAS website provides additional maps to help understand how rivers are covered in this dataset.

### Weather Model Specifications

| Weather Model | Region | Spatial Resolution | Temporal Resolution | Data Length | Update frequency |
|--------------|---------|-------------------|-------------------|-------------|------------------|
| GloFAS v4 Reanalysis | Global | 0.05° (~5 km) | Daily | 1984 - July 2022 | - |
| GloFAS v4 Forecast | Global | 0.05° (~5 km) | Daily | 30 days forecast | Daily |
| GloFAS v4 Seasonal Forecast | Global | 0.05° (~5 km) | Daily | 7 months forecast | Monthly |
| GloFAS v3 Reanalysis | Global | 0.1° (~11 km) | Daily | 1984 - July 2022 | - |
| GloFAS v3 Forecast | Global | 0.1° (~11 km) | Daily | 30 days forecast | Daily |
| GloFAS v3 Seasonal Forecast | Global | 0.1° (~11 km) | Daily | 7 months forecast | Monthly |

## API Documentation

The API endpoint `/v1/flood` accepts a geographical coordinate and returns river discharge data from the largest river in a 5 km area for the given coordinates.

### URL Parameters

| Parameter | Format | Required | Default | Description |
|-----------|---------|-----------|----------|-------------|
| latitude, longitude | Floating point | Yes | - | Geographical WGS84 coordinates of the location. Multiple coordinates can be comma separated. |
| daily | String array | No | - | List of weather variables to be returned. Values can be comma separated. |
| timeformat | String | No | iso8601 | If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. |
| past_days | Integer | No | 0 | Number of past days to return data for. |
| forecast_days | Integer (0-210) | No | 92 | Number of forecast days to return. Maximum is 210 days. |
| start_date, end_date | String (yyyy-mm-dd) | No | - | Time interval for data retrieval. Data available from 1984-01-01 until 7 month forecast. |
| ensemble | Boolean | No | - | If True, all forecast ensemble members will be returned. |
| cell_selection | String | No | nearest | Preference for grid-cell selection (land, sea, or nearest). |
| apikey | String | No | - | Required for commercial use to access reserved API resources. |

### Daily Parameter Definitions

| Variable | Unit | Description |
|----------|------|-------------|
| river_discharge | m³/s | Daily river discharge rate |
| river_discharge_mean | m³/s | Statistical mean from ensemble members |
| river_discharge_median | m³/s | Statistical median from ensemble members |
| river_discharge_max | m³/s | Maximum value from ensemble members |
| river_discharge_min | m³/s | Minimum value from ensemble members |
| river_discharge_p25 | m³/s | 25th percentile from ensemble members |
| river_discharge_p75 | m³/s | 75th percentile from ensemble members |

*Note: Statistical and ensemble forecasts are only available for forecasts, not for consolidated historical data.*

### JSON Response Format

On success, the API returns a JSON object with the following structure:

```json
{
  "latitude": 52.52,
  "longitude": 13.419,
  "generationtime_ms": 2.2119,
  "timezone": "Europe/Berlin",
  "timezone_abbreviation": "CEST",
  "hourly": {
    "time": ["2022-07-01T00:00", "2022-07-01T01:00", "2022-07-01T02:00"],
    "temperature_2m": [13, 12.7, 12.7]
  },
  "hourly_units": {
    "temperature_2m": "°C"
  }
}
```

### Response Parameters

| Parameter | Format | Description |
|-----------|---------|-------------|
| latitude, longitude | Floating point | WGS84 coordinates of the center of the weather grid-cell |
| generationtime_ms | Floating point | Generation time of the weather forecast in milliseconds |
| daily | Object | Weather variable data as floating point arrays with ISO8601 timestamps |
| daily_units | Object | Units for each weather variable |

### Error Handling

In case of an error, the API returns a JSON error object with HTTP 400 status code:

```json
{
  "error": true,
  "reason": "Cannot initialize WeatherVariable from invalid String value tempeture_2m for key hourly"
}
```
```

